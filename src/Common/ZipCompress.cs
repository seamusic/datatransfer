///////////////////////////////////////////////////////////
//  ZipCompress.cs
//  Implementation of the Class ZipCompress
//  Generated by Enterprise Architect
//  Created on:      12-七月-2012 11:10:59
//  Original author: wayne
///////////////////////////////////////////////////////////


using System.IO;
using System.IO.Compression;

namespace Daan.DataTransfer.DataCommon
{
    public class ZipCompress : DataProcessBase
    {
        /// 
        /// <param name="stream"></param>
        public static MemoryStream Compress(MemoryStream stream)
        {
            return new MemoryStream(GZipCompress(stream.ToArray()));
        }


        /// <summary>
        /// 压缩函数
        /// </summary>
        /// <param name="data">需要压缩的byte数组</param>
        /// <returns>压缩后的byte数组</returns>
        public static byte[] GZipCompress(byte[] data)
        {
            using (MemoryStream stream = new MemoryStream())
            {
                using (GZipStream gZipStream = new GZipStream(stream, CompressionMode.Compress))
                {
                    gZipStream.Write(data, 0, data.Length);
                    gZipStream.Close();
                }
                return stream.ToArray();
            }
        }

        /// <summary>
        /// 解压函数
        /// </summary>
        /// <param name="data">需要解压的Byte数组</param>
        /// <returns>解压后的byte数组</returns>
        public static byte[] GZipDecompress(byte[] data)
        {
            using (MemoryStream stream = new MemoryStream())
            {

                MemoryStream mStream = new MemoryStream(data);
                using (GZipStream gZipStream = new GZipStream(mStream, CompressionMode.Decompress))
                {
                    byte[] bytes = new byte[mStream.Length];
                    int n;
                    while ((n = gZipStream.Read(bytes, 0, bytes.Length)) != 0)
                    {
                        stream.Write(bytes, 0, n);
                    }
                    gZipStream.Close();
                }

                return stream.ToArray();
            }
        }

        /// 
        /// <param name="stream"></param>
        public static MemoryStream UnCompress(MemoryStream stream)
        {
            return new MemoryStream(GZipDecompress(stream.ToArray()));
        }

        /// <summary>
        /// 压缩函数
        /// </summary>
        /// <param name="data">需要压缩的byte数组</param>
        /// <returns>压缩后的byte数组</returns>
        public override byte[] Process(byte[] data)
        {
            using (MemoryStream stream = new MemoryStream())
            {
                using (GZipStream gZipStream = new GZipStream(stream, CompressionMode.Compress))
                {
                    gZipStream.Write(data, 0, data.Length);
                    gZipStream.Close();
                }
                return stream.ToArray();
            }
        }

        /// <summary>
        /// 解压函数
        /// </summary>
        /// <param name="data">需要解压的Byte数组</param>
        /// <returns>解压后的byte数组</returns>
        public override byte[] DeProcess(byte[] data)
        {
            using (MemoryStream stream = new MemoryStream())
            {

                MemoryStream mStream = new MemoryStream(data);
                using (GZipStream gZipStream = new GZipStream(mStream, CompressionMode.Decompress))
                {
                    byte[] bytes = new byte[mStream.Length];
                    int n;
                    while ((n = gZipStream.Read(bytes, 0, bytes.Length)) != 0)
                    {
                        stream.Write(bytes, 0, n);
                    }
                    gZipStream.Close();
                }

                return stream.ToArray();
            }
        }
    }
}