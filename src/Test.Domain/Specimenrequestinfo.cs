/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Specimenrequestinfo : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private string _requestcode; 
		private float _specimenrequestinfoid; 
		private string _hospsampleid; 
		private string _hospsamplenumber; 
		private string _patientnumber; 
		private string _bednumber; 
		private DateTime _samplingdate; 
		private string _patientname; 
		private string _sex; 
		private string _caculateage; 
		private string _patienttel; 
		private string _sectionoffice; 
		private string _doctor; 
		private string _doctortel; 
		private string _diagnostication; 
		private string _naturalitem; 
		private string _naturalitemdesc; 
		private string _hospitemcode; 
		private string _remark; 
		private DateTime _createdate; 
		private string _operateby; 
		private string _username; 
		private string _age; 
		private string _islegal; 
		private string _lmp; 
		private string _lmpdate; 
		private string _babycount; 
		private float _uninevolumn; 
		private string _bodystyle; 
		private float _weight; 
		private float _height; 
		private DateTime _birthday; 
		private string _bultrasonic; 
		private string _pregnant; 
		private string _itemtype; 
		private string _programid; 
		private string _originalxml; 
		private string _verifyremark; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Specimenrequestinfo()
		{
			_requestcode = null; 
			_specimenrequestinfoid = 0; 
			_hospsampleid = null; 
			_hospsamplenumber = null; 
			_patientnumber = null; 
			_bednumber = null; 
			_samplingdate = new DateTime(); 
			_patientname = null; 
			_sex = null; 
			_caculateage = null; 
			_patienttel = null; 
			_sectionoffice = null; 
			_doctor = null; 
			_doctortel = null; 
			_diagnostication = null; 
			_naturalitem = null; 
			_naturalitemdesc = null; 
			_hospitemcode = null; 
			_remark = null; 
			_createdate = new DateTime(); 
			_operateby = null; 
			_username = null; 
			_age = null; 
			_islegal = null; 
			_lmp = null; 
			_lmpdate = null; 
			_babycount = null; 
			_uninevolumn = 0; 
			_bodystyle = null; 
			_weight = 0; 
			_height = 0; 
			_birthday = new DateTime(); 
			_bultrasonic = null; 
			_pregnant = null; 
			_itemtype = null; 
			_programid = null; 
			_originalxml = null; 
			_verifyremark = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 达安条码
		/// </summary>		
		public string Requestcode
		{
			get { return _requestcode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Requestcode", value, value.ToString());
				
				_isChanged |= (_requestcode != value); _requestcode = value;
			}
		}
			
		/// <summary>
		/// 主键
		/// </summary>		
		public float Specimenrequestinfoid
		{
			get { return _specimenrequestinfoid; }
			set { _isChanged |= (_specimenrequestinfoid != value); _specimenrequestinfoid = value; }
		}
			
		/// <summary>
		/// 医院条码
		/// </summary>		
		public string Hospsampleid
		{
			get { return _hospsampleid; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Hospsampleid", value, value.ToString());
				
				_isChanged |= (_hospsampleid != value); _hospsampleid = value;
			}
		}
			
		/// <summary>
		/// 医院样本号
		/// </summary>		
		public string Hospsamplenumber
		{
			get { return _hospsamplenumber; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Hospsamplenumber", value, value.ToString());
				
				_isChanged |= (_hospsamplenumber != value); _hospsamplenumber = value;
			}
		}
			
		/// <summary>
		/// 住院号/门诊号
		/// </summary>		
		public string Patientnumber
		{
			get { return _patientnumber; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Patientnumber", value, value.ToString());
				
				_isChanged |= (_patientnumber != value); _patientnumber = value;
			}
		}
			
		/// <summary>
		/// 病床号
		/// </summary>		
		public string Bednumber
		{
			get { return _bednumber; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Bednumber", value, value.ToString());
				
				_isChanged |= (_bednumber != value); _bednumber = value;
			}
		}
			
		/// <summary>
		/// 采样时间
		/// </summary>		
		public DateTime Samplingdate
		{
			get { return _samplingdate; }
			set { _isChanged |= (_samplingdate != value); _samplingdate = value; }
		}
			
		/// <summary>
		/// 姓名
		/// </summary>		
		public string Patientname
		{
			get { return _patientname; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Patientname", value, value.ToString());
				
				_isChanged |= (_patientname != value); _patientname = value;
			}
		}
			
		/// <summary>
		/// 性别
		/// </summary>		
		public string Sex
		{
			get { return _sex; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Sex", value, value.ToString());
				
				_isChanged |= (_sex != value); _sex = value;
			}
		}
			
		/// <summary>
		/// 计算后的年龄（小时为单位）
		/// </summary>		
		public string Caculateage
		{
			get { return _caculateage; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Caculateage", value, value.ToString());
				
				_isChanged |= (_caculateage != value); _caculateage = value;
			}
		}
			
		/// <summary>
		/// 病人电话
		/// </summary>		
		public string Patienttel
		{
			get { return _patienttel; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Patienttel", value, value.ToString());
				
				_isChanged |= (_patienttel != value); _patienttel = value;
			}
		}
			
		/// <summary>
		/// 科室
		/// </summary>		
		public string Sectionoffice
		{
			get { return _sectionoffice; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Sectionoffice", value, value.ToString());
				
				_isChanged |= (_sectionoffice != value); _sectionoffice = value;
			}
		}
			
		/// <summary>
		/// 医生
		/// </summary>		
		public string Doctor
		{
			get { return _doctor; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Doctor", value, value.ToString());
				
				_isChanged |= (_doctor != value); _doctor = value;
			}
		}
			
		/// <summary>
		/// 医生电话
		/// </summary>		
		public string Doctortel
		{
			get { return _doctortel; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Doctortel", value, value.ToString());
				
				_isChanged |= (_doctortel != value); _doctortel = value;
			}
		}
			
		/// <summary>
		/// 诊断
		/// </summary>		
		public string Diagnostication
		{
			get { return _diagnostication; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Diagnostication", value, value.ToString());
				
				_isChanged |= (_diagnostication != value); _diagnostication = value;
			}
		}
			
		/// <summary>
		/// 逗号隔开的项目达安项目代码
		/// </summary>		
		public string Naturalitem
		{
			get { return _naturalitem; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Naturalitem", value, value.ToString());
				
				_isChanged |= (_naturalitem != value); _naturalitem = value;
			}
		}
			
		/// <summary>
		/// 逗号隔开的医院方面的项目名称
		/// </summary>		
		public string Naturalitemdesc
		{
			get { return _naturalitemdesc; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Naturalitemdesc", value, value.ToString());
				
				_isChanged |= (_naturalitemdesc != value); _naturalitemdesc = value;
			}
		}
			
		/// <summary>
		/// 逗号隔开的医院方面的项目代码
		/// </summary>		
		public string Hospitemcode
		{
			get { return _hospitemcode; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Hospitemcode", value, value.ToString());
				
				_isChanged |= (_hospitemcode != value); _hospitemcode = value;
			}
		}
			
		/// <summary>
		/// 备注
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// 创建日期
		/// </summary>		
		public DateTime Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// 操作人姓名
		/// </summary>		
		public string Operateby
		{
			get { return _operateby; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Operateby", value, value.ToString());
				
				_isChanged |= (_operateby != value); _operateby = value;
			}
		}
			
		/// <summary>
		/// 登录用户代码
		/// </summary>		
		public string Username
		{
			get { return _username; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Username", value, value.ToString());
				
				_isChanged |= (_username != value); _username = value;
			}
		}
			
		/// <summary>
		/// 加年龄单位年龄 比如13月/3岁2月/7岁/成人/婴儿
		/// </summary>		
		public string Age
		{
			get { return _age; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Age", value, value.ToString());
				
				_isChanged |= (_age != value); _age = value;
			}
		}
			
		/// <summary>
		/// 记录合法性 1 合法 0 不合法
		/// </summary>		
		public string Islegal
		{
			get { return _islegal; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Islegal", value, value.ToString());
				
				_isChanged |= (_islegal != value); _islegal = value;
			}
		}
			
		/// <summary>
		/// 未次月经孕周(Last Menstrual Pregant )
		/// </summary>		
		public string Lmp
		{
			get { return _lmp; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Lmp", value, value.ToString());
				
				_isChanged |= (_lmp != value); _lmp = value;
			}
		}
			
		/// <summary>
		/// 未次月经孕日
		/// </summary>		
		public string Lmpdate
		{
			get { return _lmpdate; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Lmpdate", value, value.ToString());
				
				_isChanged |= (_lmpdate != value); _lmpdate = value;
			}
		}
			
		/// <summary>
		/// 怀孕的胎数
		/// </summary>		
		public string Babycount
		{
			get { return _babycount; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Babycount", value, value.ToString());
				
				_isChanged |= (_babycount != value); _babycount = value;
			}
		}
			
		/// <summary>
		/// 24小时尿量（ml)
		/// </summary>		
		public float Uninevolumn
		{
			get { return _uninevolumn; }
			set { _isChanged |= (_uninevolumn != value); _uninevolumn = value; }
		}
			
		/// <summary>
		/// 体位
		/// </summary>		
		public string Bodystyle
		{
			get { return _bodystyle; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Bodystyle", value, value.ToString());
				
				_isChanged |= (_bodystyle != value); _bodystyle = value;
			}
		}
			
		/// <summary>
		/// 体重
		/// </summary>		
		public float Weight
		{
			get { return _weight; }
			set { _isChanged |= (_weight != value); _weight = value; }
		}
			
		/// <summary>
		/// 身高
		/// </summary>		
		public float Height
		{
			get { return _height; }
			set { _isChanged |= (_height != value); _height = value; }
		}
			
		/// <summary>
		/// 生日
		/// </summary>		
		public DateTime Birthday
		{
			get { return _birthday; }
			set { _isChanged |= (_birthday != value); _birthday = value; }
		}
			
		/// <summary>
		/// B超孕周
		/// </summary>		
		public string Bultrasonic
		{
			get { return _bultrasonic; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Bultrasonic", value, value.ToString());
				
				_isChanged |= (_bultrasonic != value); _bultrasonic = value;
			}
		}
			
		/// <summary>
		/// 妊娠备注/孕周(日)
		/// </summary>		
		public string Pregnant
		{
			get { return _pregnant; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Pregnant", value, value.ToString());
				
				_isChanged |= (_pregnant != value); _pregnant = value;
			}
		}
			
		/// <summary>
		/// 0 常规项目 1 病理项目
		/// </summary>		
		public string Itemtype
		{
			get { return _itemtype; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Itemtype", value, value.ToString());
				
				_isChanged |= (_itemtype != value); _itemtype = value;
			}
		}
			
		/// <summary>
		/// 3体检系统传入5医院传入
		/// </summary>		
		public string Programid
		{
			get { return _programid; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Programid", value, value.ToString());
				
				_isChanged |= (_programid != value); _programid = value;
			}
		}
			
		/// <summary>
		/// 原始XML字符
		/// </summary>		
		public string Originalxml
		{
			get { return _originalxml; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Originalxml", value, value.ToString());
				
				_isChanged |= (_originalxml != value); _originalxml = value;
			}
		}
			
		/// <summary>
		/// 验证消息
		/// </summary>		
		public string Verifyremark
		{
			get { return _verifyremark; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Verifyremark", value, value.ToString());
				
				_isChanged |= (_verifyremark != value); _verifyremark = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
