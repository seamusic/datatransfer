/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictdoctor : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictdoctorid; 
		private float _dictlocationid; 
		private string _fastcode; 
		private string _doctorcode; 
		private string _doctorname; 
		private string _active; 
		private float _dictcustomerid; 
		private string _phone; 
		private string _remark; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictdoctor()
		{
			_dictdoctorid = 0; 
			_dictlocationid = 0; 
			_fastcode = null; 
			_doctorcode = null; 
			_doctorname = null; 
			_active = null; 
			_dictcustomerid = 0; 
			_phone = null; 
			_remark = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 自增长主键
		/// </summary>		
		public float Dictdoctorid
		{
			get { return _dictdoctorid; }
			set { _isChanged |= (_dictdoctorid != value); _dictdoctorid = value; }
		}
			
		/// <summary>
		/// 外键，对应表DOCTOR
		/// </summary>		
		public float Dictlocationid
		{
			get { return _dictlocationid; }
			set { _isChanged |= (_dictlocationid != value); _dictlocationid = value; }
		}
			
		/// <summary>
		/// 助记码
		/// </summary>		
		public string Fastcode
		{
			get { return _fastcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());
				
				_isChanged |= (_fastcode != value); _fastcode = value;
			}
		}
			
		/// <summary>
		/// 医生代码
		/// </summary>		
		public string Doctorcode
		{
			get { return _doctorcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Doctorcode", value, value.ToString());
				
				_isChanged |= (_doctorcode != value); _doctorcode = value;
			}
		}
			
		/// <summary>
		/// 医生名称
		/// </summary>		
		public string Doctorname
		{
			get { return _doctorname; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Doctorname", value, value.ToString());
				
				_isChanged |= (_doctorname != value); _doctorname = value;
			}
		}
			
		/// <summary>
		/// 是否可用 0-否  1- 是
		/// </summary>		
		public string Active
		{
			get { return _active; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());
				
				_isChanged |= (_active != value); _active = value;
			}
		}
			
		/// <summary>
		/// 所属客户ID，对应表DICTCUSTOMER
		/// </summary>		
		public float Dictcustomerid
		{
			get { return _dictcustomerid; }
			set { _isChanged |= (_dictcustomerid != value); _dictcustomerid = value; }
		}
			
		/// <summary>
		/// 联系电话
		/// </summary>		
		public string Phone
		{
			get { return _phone; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Phone", value, value.ToString());
				
				_isChanged |= (_phone != value); _phone = value;
			}
		}
			
		/// <summary>
		/// 备注
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
