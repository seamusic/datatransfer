/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictinputtemplateitem : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictinputtemplateitemid; 
		private float _dictinputtemplateid; 
		private float _parentid; 
		private float _treelevel; 
		private string _itemname; 
		private string _inputtype; 
		private float _displayorder; 
		private string _report; 
		private string _defaultshow; 
		private string _itemcode; 
		private string _uniqueid; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictinputtemplateitem()
		{
			_dictinputtemplateitemid = 0; 
			_dictinputtemplateid = 0; 
			_parentid = 0; 
			_treelevel = 0; 
			_itemname = null; 
			_inputtype = null; 
			_displayorder = 0; 
			_report = null; 
			_defaultshow = null; 
			_itemcode = null; 
			_uniqueid = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自增长ID
		/// </summary>		
		public float Dictinputtemplateitemid
		{
			get { return _dictinputtemplateitemid; }
			set { _isChanged |= (_dictinputtemplateitemid != value); _dictinputtemplateitemid = value; }
		}
			
		/// <summary>
		/// 外键，对应表DICTINPUTTEMPLATE
		/// </summary>		
		public float Dictinputtemplateid
		{
			get { return _dictinputtemplateid; }
			set { _isChanged |= (_dictinputtemplateid != value); _dictinputtemplateid = value; }
		}
			
		/// <summary>
		/// 所属父亲ID
		/// </summary>		
		public float Parentid
		{
			get { return _parentid; }
			set { _isChanged |= (_parentid != value); _parentid = value; }
		}
			
		/// <summary>
		/// 所在层数
		/// </summary>		
		public float Treelevel
		{
			get { return _treelevel; }
			set { _isChanged |= (_treelevel != value); _treelevel = value; }
		}
			
		/// <summary>
		/// 项目名字
		/// </summary>		
		public string Itemname
		{
			get { return _itemname; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Itemname", value, value.ToString());
				
				_isChanged |= (_itemname != value); _itemname = value;
			}
		}
			
		/// <summary>
		/// 0-文本  1-下拉框
		/// </summary>		
		public string Inputtype
		{
			get { return _inputtype; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Inputtype", value, value.ToString());
				
				_isChanged |= (_inputtype != value); _inputtype = value;
			}
		}
			
		/// <summary>
		/// 打印报告顺序
		/// </summary>		
		public float Displayorder
		{
			get { return _displayorder; }
			set { _isChanged |= (_displayorder != value); _displayorder = value; }
		}
			
		/// <summary>
		/// 是否打印报告
		/// </summary>		
		public string Report
		{
			get { return _report; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Report", value, value.ToString());
				
				_isChanged |= (_report != value); _report = value;
			}
		}
			
		/// <summary>
		/// 默认带出的显示内容
		/// </summary>		
		public string Defaultshow
		{
			get { return _defaultshow; }
			set	
			{
				if( value!= null && value.Length > 2000)
					throw new ArgumentOutOfRangeException("Invalid value for Defaultshow", value, value.ToString());
				
				_isChanged |= (_defaultshow != value); _defaultshow = value;
			}
		}
			
		/// <summary>
		/// 项目名称
		/// </summary>		
		public string Itemcode
		{
			get { return _itemcode; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Itemcode", value, value.ToString());
				
				_isChanged |= (_itemcode != value); _itemcode = value;
			}
		}
			
		/// <summary>
		/// 全国统一码
		/// </summary>		
		public string Uniqueid
		{
			get { return _uniqueid; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Uniqueid", value, value.ToString());
				
				_isChanged |= (_uniqueid != value); _uniqueid = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
