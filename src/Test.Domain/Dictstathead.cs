/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictstathead : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictstatheadid; 
		private string _defaultorderby; 
		private string _defaultgroupby; 
		private string _headtitle; 
		private string _defaultwhere; 
		private string _headcode; 
		private float _displayorder; 
		private string _codetemplate; 
		private string _sqlstring; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictstathead()
		{
			_dictstatheadid = 0; 
			_defaultorderby = null; 
			_defaultgroupby = null; 
			_headtitle = null; 
			_defaultwhere = null; 
			_headcode = null; 
			_displayorder = 0; 
			_codetemplate = null; 
			_sqlstring = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 关键字，通用查询窗口所用的ID
		/// </summary>		
		public float Dictstatheadid
		{
			get { return _dictstatheadid; }
			set { _isChanged |= (_dictstatheadid != value); _dictstatheadid = value; }
		}
			
		/// <summary>
		/// 默认排序字段
		/// </summary>		
		public string Defaultorderby
		{
			get { return _defaultorderby; }
			set	
			{
				if( value!= null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Defaultorderby", value, value.ToString());
				
				_isChanged |= (_defaultorderby != value); _defaultorderby = value;
			}
		}
			
		/// <summary>
		/// 默认分组
		/// </summary>		
		public string Defaultgroupby
		{
			get { return _defaultgroupby; }
			set	
			{
				if( value!= null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Defaultgroupby", value, value.ToString());
				
				_isChanged |= (_defaultgroupby != value); _defaultgroupby = value;
			}
		}
			
		/// <summary>
		/// 报表名称
		/// </summary>		
		public string Headtitle
		{
			get { return _headtitle; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Headtitle", value, value.ToString());
				
				_isChanged |= (_headtitle != value); _headtitle = value;
			}
		}
			
		/// <summary>
		/// 默认where条件
		/// </summary>		
		public string Defaultwhere
		{
			get { return _defaultwhere; }
			set	
			{
				if( value!= null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Defaultwhere", value, value.ToString());
				
				_isChanged |= (_defaultwhere != value); _defaultwhere = value;
			}
		}
			
		/// <summary>
		/// 记录当前报表代码
		/// </summary>		
		public string Headcode
		{
			get { return _headcode; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Headcode", value, value.ToString());
				
				_isChanged |= (_headcode != value); _headcode = value;
			}
		}
			
		/// <summary>
		/// 显示顺序
		/// </summary>		
		public float Displayorder
		{
			get { return _displayorder; }
			set { _isChanged |= (_displayorder != value); _displayorder = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Codetemplate
		{
			get { return _codetemplate; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Codetemplate", value, value.ToString());
				
				_isChanged |= (_codetemplate != value); _codetemplate = value;
			}
		}
			
		/// <summary>
		/// 查询语句或视图
		/// </summary>		
		public string Sqlstring
		{
			get { return _sqlstring; }
			set	
			{
				if( value!= null && value.Length > 2147483647)
					throw new ArgumentOutOfRangeException("Invalid value for Sqlstring", value, value.ToString());
				
				_isChanged |= (_sqlstring != value); _sqlstring = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
