/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictruleformular : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictruleformularid; 
		private float _dicttestitemid; 
		private string _formular; 
		private string _formulardesc; 
		private string _formulatype; 
		private string _alerttype; 
		private string _remark; 
		private float _dictdianogsisid; 
		private string _ismarry; 
		private float _agehight; 
		private string _ageunit; 
		private float _caculatedagelow; 
		private float _caculatedagehigh; 
		private string _sex; 
		private float _agelow; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictruleformular()
		{
			_dictruleformularid = 0; 
			_dicttestitemid = 0; 
			_formular = null; 
			_formulardesc = null; 
			_formulatype = null; 
			_alerttype = null; 
			_remark = null; 
			_dictdianogsisid = 0; 
			_ismarry = null; 
			_agehight = 0; 
			_ageunit = null; 
			_caculatedagelow = 0; 
			_caculatedagehigh = 0; 
			_sex = null; 
			_agelow = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自动ID
		/// </summary>		
		public float Dictruleformularid
		{
			get { return _dictruleformularid; }
			set { _isChanged |= (_dictruleformularid != value); _dictruleformularid = value; }
		}
			
		/// <summary>
		/// 测试项ID
		/// </summary>		
		public float Dicttestitemid
		{
			get { return _dicttestitemid; }
			set { _isChanged |= (_dicttestitemid != value); _dicttestitemid = value; }
		}
			
		/// <summary>
		/// 公式内容
		/// </summary>		
		public string Formular
		{
			get { return _formular; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Formular", value, value.ToString());
				
				_isChanged |= (_formular != value); _formular = value;
			}
		}
			
		/// <summary>
		/// 公式描述
		/// </summary>		
		public string Formulardesc
		{
			get { return _formulardesc; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Formulardesc", value, value.ToString());
				
				_isChanged |= (_formulardesc != value); _formulardesc = value;
			}
		}
			
		/// <summary>
		/// 类型  0-计算公式   1-规则公式
		/// </summary>		
		public string Formulatype
		{
			get { return _formulatype; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Formulatype", value, value.ToString());
				
				_isChanged |= (_formulatype != value); _formulatype = value;
			}
		}
			
		/// <summary>
		/// 规则公式的提醒类型  0-提醒型   1-强制型
		/// </summary>		
		public string Alerttype
		{
			get { return _alerttype; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Alerttype", value, value.ToString());
				
				_isChanged |= (_alerttype != value); _alerttype = value;
			}
		}
			
		/// <summary>
		/// 备注信息
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// 医学建议表的ID
		/// </summary>		
		public float Dictdianogsisid
		{
			get { return _dictdianogsisid; }
			set { _isChanged |= (_dictdianogsisid != value); _dictdianogsisid = value; }
		}
			
		/// <summary>
		/// 结婚状态：0 未婚；1已婚；2全部
		/// </summary>		
		public string Ismarry
		{
			get { return _ismarry; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Ismarry", value, value.ToString());
				
				_isChanged |= (_ismarry != value); _ismarry = value;
			}
		}
			
		/// <summary>
		/// 结束年龄
		/// </summary>		
		public float Agehight
		{
			get { return _agehight; }
			set { _isChanged |= (_agehight != value); _agehight = value; }
		}
			
		/// <summary>
		/// 年龄单位
		/// </summary>		
		public string Ageunit
		{
			get { return _ageunit; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Ageunit", value, value.ToString());
				
				_isChanged |= (_ageunit != value); _ageunit = value;
			}
		}
			
		/// <summary>
		/// 年龄计算值--低值（小时）
		/// </summary>		
		public float Caculatedagelow
		{
			get { return _caculatedagelow; }
			set { _isChanged |= (_caculatedagelow != value); _caculatedagelow = value; }
		}
			
		/// <summary>
		/// 年龄计算值--高值（小时）
		/// </summary>		
		public float Caculatedagehigh
		{
			get { return _caculatedagehigh; }
			set { _isChanged |= (_caculatedagehigh != value); _caculatedagehigh = value; }
		}
			
		/// <summary>
		/// 性别：男/女/不限
		/// </summary>		
		public string Sex
		{
			get { return _sex; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Sex", value, value.ToString());
				
				_isChanged |= (_sex != value); _sex = value;
			}
		}
			
		/// <summary>
		/// 起始年龄
		/// </summary>		
		public float Agelow
		{
			get { return _agelow; }
			set { _isChanged |= (_agelow != value); _agelow = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
