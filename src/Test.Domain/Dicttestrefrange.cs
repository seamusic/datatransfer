/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dicttestrefrange : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dicttestrefrangeid; 
		private float _dicttestitemid; 
		private string _sex; 
		private float _dictspecimentypeid; 
		private float _agelow; 
		private float _agehigh; 
		private string _ageunit; 
		private float _caculatedagelow; 
		private float _caculatedagehigh; 
		private string _reflow; 
		private string _refhigh; 
		private string _paniclow; 
		private string _panichigh; 
		private string _textshow; 
		private float _dictinstrumentid; 
		private string _remark; 
		private string _engtextshow; 
		private string _engremark; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dicttestrefrange()
		{
			_dicttestrefrangeid = 0; 
			_dicttestitemid = 0; 
			_sex = null; 
			_dictspecimentypeid = 0; 
			_agelow = 0; 
			_agehigh = 0; 
			_ageunit = null; 
			_caculatedagelow = 0; 
			_caculatedagehigh = 0; 
			_reflow = null; 
			_refhigh = null; 
			_paniclow = null; 
			_panichigh = null; 
			_textshow = null; 
			_dictinstrumentid = 0; 
			_remark = null; 
			_engtextshow = null; 
			_engremark = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自动ID
		/// </summary>		
		public float Dicttestrefrangeid
		{
			get { return _dicttestrefrangeid; }
			set { _isChanged |= (_dicttestrefrangeid != value); _dicttestrefrangeid = value; }
		}
			
		/// <summary>
		/// 测试项ID，来自表TESTITEM
		/// </summary>		
		public float Dicttestitemid
		{
			get { return _dicttestitemid; }
			set { _isChanged |= (_dicttestitemid != value); _dicttestitemid = value; }
		}
			
		/// <summary>
		/// 性别：男/女/空白
		/// </summary>		
		public string Sex
		{
			get { return _sex; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Sex", value, value.ToString());
				
				_isChanged |= (_sex != value); _sex = value;
			}
		}
			
		/// <summary>
		/// 样本类型ID,对应表DictLiabrary
		/// </summary>		
		public float Dictspecimentypeid
		{
			get { return _dictspecimentypeid; }
			set { _isChanged |= (_dictspecimentypeid != value); _dictspecimentypeid = value; }
		}
			
		/// <summary>
		/// 起始年龄
		/// </summary>		
		public float Agelow
		{
			get { return _agelow; }
			set { _isChanged |= (_agelow != value); _agelow = value; }
		}
			
		/// <summary>
		/// 结束年龄
		/// </summary>		
		public float Agehigh
		{
			get { return _agehigh; }
			set { _isChanged |= (_agehigh != value); _agehigh = value; }
		}
			
		/// <summary>
		/// 年龄单位
		/// </summary>		
		public string Ageunit
		{
			get { return _ageunit; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Ageunit", value, value.ToString());
				
				_isChanged |= (_ageunit != value); _ageunit = value;
			}
		}
			
		/// <summary>
		/// 年龄计算值--低值（小时）
		/// </summary>		
		public float Caculatedagelow
		{
			get { return _caculatedagelow; }
			set { _isChanged |= (_caculatedagelow != value); _caculatedagelow = value; }
		}
			
		/// <summary>
		/// 年龄计算值--高值（小时）
		/// </summary>		
		public float Caculatedagehigh
		{
			get { return _caculatedagehigh; }
			set { _isChanged |= (_caculatedagehigh != value); _caculatedagehigh = value; }
		}
			
		/// <summary>
		/// 参考低值
		/// </summary>		
		public string Reflow
		{
			get { return _reflow; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Reflow", value, value.ToString());
				
				_isChanged |= (_reflow != value); _reflow = value;
			}
		}
			
		/// <summary>
		/// 参考高值
		/// </summary>		
		public string Refhigh
		{
			get { return _refhigh; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Refhigh", value, value.ToString());
				
				_isChanged |= (_refhigh != value); _refhigh = value;
			}
		}
			
		/// <summary>
		/// 危险低值
		/// </summary>		
		public string Paniclow
		{
			get { return _paniclow; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Paniclow", value, value.ToString());
				
				_isChanged |= (_paniclow != value); _paniclow = value;
			}
		}
			
		/// <summary>
		/// 危险高值
		/// </summary>		
		public string Panichigh
		{
			get { return _panichigh; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Panichigh", value, value.ToString());
				
				_isChanged |= (_panichigh != value); _panichigh = value;
			}
		}
			
		/// <summary>
		/// 文字参考范围
		/// </summary>		
		public string Textshow
		{
			get { return _textshow; }
			set	
			{
				if( value!= null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Textshow", value, value.ToString());
				
				_isChanged |= (_textshow != value); _textshow = value;
			}
		}
			
		/// <summary>
		/// 仪器ID,对应表DictInstrument
		/// </summary>		
		public float Dictinstrumentid
		{
			get { return _dictinstrumentid; }
			set { _isChanged |= (_dictinstrumentid != value); _dictinstrumentid = value; }
		}
			
		/// <summary>
		/// 参考范围备注
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 300)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// 英文文字参考范围
		/// </summary>		
		public string Engtextshow
		{
			get { return _engtextshow; }
			set	
			{
				if( value!= null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Engtextshow", value, value.ToString());
				
				_isChanged |= (_engtextshow != value); _engtextshow = value;
			}
		}
			
		/// <summary>
		/// 参考范围的英文备注
		/// </summary>		
		public string Engremark
		{
			get { return _engremark; }
			set	
			{
				if( value!= null && value.Length > 300)
					throw new ArgumentOutOfRangeException("Invalid value for Engremark", value, value.ToString());
				
				_isChanged |= (_engremark != value); _engremark = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
