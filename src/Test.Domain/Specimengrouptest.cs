/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Specimengrouptest : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private string _subbarcode; 
		private float _dicttestitemid; 
		private string _testcode; 
		private string _engname; 
		private string _testname; 
		private float _dictspecimentypeid; 
		private float _standardprice; 
		private float _customerprice; 
		private float _finalprice; 
		private string _billed; 
		private string _status; 
		private DateTime _createdate; 
		private float _testcount; 
		private float _specimengrouptestid; 
		private string _fastcode; 
		private float _actualprice; 
		private float _groupprice; 
		private float _alternateprice; 
		private float _contractprice; 
		private float _discount; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Specimengrouptest()
		{
			_subbarcode = null; 
			_dicttestitemid = 0; 
			_testcode = null; 
			_engname = null; 
			_testname = null; 
			_dictspecimentypeid = 0; 
			_standardprice = 0; 
			_customerprice = 0; 
			_finalprice = 0; 
			_billed = null; 
			_status = null; 
			_createdate = new DateTime(); 
			_testcount = 0; 
			_specimengrouptestid = 0; 
			_fastcode = null; 
			_actualprice = 0; 
			_groupprice = 0; 
			_alternateprice = 0; 
			_contractprice = 0; 
			_discount = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 子条码号
		/// </summary>		
		public string Subbarcode
		{
			get { return _subbarcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Subbarcode", value, value.ToString());
				
				_isChanged |= (_subbarcode != value); _subbarcode = value;
			}
		}
			
		/// <summary>
		/// 测试项ID
		/// </summary>		
		public float Dicttestitemid
		{
			get { return _dicttestitemid; }
			set { _isChanged |= (_dicttestitemid != value); _dicttestitemid = value; }
		}
			
		/// <summary>
		/// 测试项编号
		/// </summary>		
		public string Testcode
		{
			get { return _testcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Testcode", value, value.ToString());
				
				_isChanged |= (_testcode != value); _testcode = value;
			}
		}
			
		/// <summary>
		/// 测试项英文名
		/// </summary>		
		public string Engname
		{
			get { return _engname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Engname", value, value.ToString());
				
				_isChanged |= (_engname != value); _engname = value;
			}
		}
			
		/// <summary>
		/// 测试项中文名
		/// </summary>		
		public string Testname
		{
			get { return _testname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Testname", value, value.ToString());
				
				_isChanged |= (_testname != value); _testname = value;
			}
		}
			
		/// <summary>
		/// 标本类型
		/// </summary>		
		public float Dictspecimentypeid
		{
			get { return _dictspecimentypeid; }
			set { _isChanged |= (_dictspecimentypeid != value); _dictspecimentypeid = value; }
		}
			
		/// <summary>
		/// 达安标准价
		/// </summary>		
		public float Standardprice
		{
			get { return _standardprice; }
			set { _isChanged |= (_standardprice != value); _standardprice = value; }
		}
			
		/// <summary>
		/// 客户定价
		/// </summary>		
		public float Customerprice
		{
			get { return _customerprice; }
			set { _isChanged |= (_customerprice != value); _customerprice = value; }
		}
			
		/// <summary>
		/// 成交价
		/// </summary>		
		public float Finalprice
		{
			get { return _finalprice; }
			set { _isChanged |= (_finalprice != value); _finalprice = value; }
		}
			
		/// <summary>
		/// 0-未生成账单清单  1- 已生成账单清单
		/// </summary>		
		public string Billed
		{
			get { return _billed; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Billed", value, value.ToString());
				
				_isChanged |= (_billed != value); _billed = value;
			}
		}
			
		/// <summary>
		/// 项目状态 0-作废  1-正常状态
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_isChanged |= (_status != value); _status = value;
			}
		}
			
		/// <summary>
		/// 记录生成日期
		/// </summary>		
		public DateTime Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// 组合包含的项目数
		/// </summary>		
		public float Testcount
		{
			get { return _testcount; }
			set { _isChanged |= (_testcount != value); _testcount = value; }
		}
			
		/// <summary>
		/// 序列，主键ID
		/// </summary>		
		public float Specimengrouptestid
		{
			get { return _specimengrouptestid; }
			set { _isChanged |= (_specimengrouptestid != value); _specimengrouptestid = value; }
		}
			
		/// <summary>
		/// 助记码
		/// </summary>		
		public string Fastcode
		{
			get { return _fastcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());
				
				_isChanged |= (_fastcode != value); _fastcode = value;
			}
		}
			
		/// <summary>
		/// 实收价钱(X此字段作废X)
		/// </summary>		
		public float Actualprice
		{
			get { return _actualprice; }
			set { _isChanged |= (_actualprice != value); _actualprice = value; }
		}
			
		/// <summary>
		/// 达安不同区域的价钱
		/// </summary>		
		public float Groupprice
		{
			get { return _groupprice; }
			set { _isChanged |= (_groupprice != value); _groupprice = value; }
		}
			
		/// <summary>
		/// 达安标准价/区域价，最终二选一后的价钱
		/// </summary>		
		public float Alternateprice
		{
			get { return _alternateprice; }
			set { _isChanged |= (_alternateprice != value); _alternateprice = value; }
		}
			
		/// <summary>
		/// 应收价钱(合同价)
		/// </summary>		
		public float Contractprice
		{
			get { return _contractprice; }
			set { _isChanged |= (_contractprice != value); _contractprice = value; }
		}
			
		/// <summary>
		/// 最终折扣
		/// </summary>		
		public float Discount
		{
			get { return _discount; }
			set { _isChanged |= (_discount != value); _discount = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
