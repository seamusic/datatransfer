/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictuserinstrument : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictuserinstrumentid; 
		private float _dictuserid; 
		private float _dictinstrumentid; 
		private string _ispermit; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictuserinstrument()
		{
			_dictuserinstrumentid = 0; 
			_dictuserid = 0; 
			_dictinstrumentid = 0; 
			_ispermit = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 内码
		/// </summary>		
		public float Dictuserinstrumentid
		{
			get { return _dictuserinstrumentid; }
			set { _isChanged |= (_dictuserinstrumentid != value); _dictuserinstrumentid = value; }
		}
			
		/// <summary>
		/// 用户ID
		/// </summary>		
		public float Dictuserid
		{
			get { return _dictuserid; }
			set { _isChanged |= (_dictuserid != value); _dictuserid = value; }
		}
			
		/// <summary>
		/// 仪器ID
		/// </summary>		
		public float Dictinstrumentid
		{
			get { return _dictinstrumentid; }
			set { _isChanged |= (_dictinstrumentid != value); _dictinstrumentid = value; }
		}
			
		/// <summary>
		/// 是否可用
		/// </summary>		
		public string Ispermit
		{
			get { return _ispermit; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Ispermit", value, value.ToString());
				
				_isChanged |= (_ispermit != value); _ispermit = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
