/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Micorganismresult : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private string _subbarcode; 
		private float _dicttestitemid; 
		private float _dictorganismid; 
		private string _organismcode; 
		private string _organismcname; 
		private string _organismename; 
		private string _tips; 
		private string _quantity; 
		private string _quantitycomment; 
		private float _displayorder; 
		private string _testmethod; 
		private string _status; 
		private DateTime _createdate; 
		private float _reportoption; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Micorganismresult()
		{
			_subbarcode = null; 
			_dicttestitemid = 0; 
			_dictorganismid = 0; 
			_organismcode = null; 
			_organismcname = null; 
			_organismename = null; 
			_tips = null; 
			_quantity = null; 
			_quantitycomment = null; 
			_displayorder = 0; 
			_testmethod = null; 
			_status = null; 
			_createdate = new DateTime(); 
			_reportoption = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 子条码号
		/// </summary>		
		public string Subbarcode
		{
			get { return _subbarcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Subbarcode", value, value.ToString());
				
				_isChanged |= (_subbarcode != value); _subbarcode = value;
			}
		}
			
		/// <summary>
		/// 测试项ID
		/// </summary>		
		public float Dicttestitemid
		{
			get { return _dicttestitemid; }
			set { _isChanged |= (_dicttestitemid != value); _dicttestitemid = value; }
		}
			
		/// <summary>
		/// 细菌ID
		/// </summary>		
		public float Dictorganismid
		{
			get { return _dictorganismid; }
			set { _isChanged |= (_dictorganismid != value); _dictorganismid = value; }
		}
			
		/// <summary>
		/// 细菌代码
		/// </summary>		
		public string Organismcode
		{
			get { return _organismcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Organismcode", value, value.ToString());
				
				_isChanged |= (_organismcode != value); _organismcode = value;
			}
		}
			
		/// <summary>
		/// 细菌中文名
		/// </summary>		
		public string Organismcname
		{
			get { return _organismcname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Organismcname", value, value.ToString());
				
				_isChanged |= (_organismcname != value); _organismcname = value;
			}
		}
			
		/// <summary>
		/// 细菌英文名称
		/// </summary>		
		public string Organismename
		{
			get { return _organismename; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Organismename", value, value.ToString());
				
				_isChanged |= (_organismename != value); _organismename = value;
			}
		}
			
		/// <summary>
		/// 提示
		/// </summary>		
		public string Tips
		{
			get { return _tips; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Tips", value, value.ToString());
				
				_isChanged |= (_tips != value); _tips = value;
			}
		}
			
		/// <summary>
		/// 结果
		/// </summary>		
		public string Quantity
		{
			get { return _quantity; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Quantity", value, value.ToString());
				
				_isChanged |= (_quantity != value); _quantity = value;
			}
		}
			
		/// <summary>
		/// 细菌评价
		/// </summary>		
		public string Quantitycomment
		{
			get { return _quantitycomment; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Quantitycomment", value, value.ToString());
				
				_isChanged |= (_quantitycomment != value); _quantitycomment = value;
			}
		}
			
		/// <summary>
		/// 打印顺序
		/// </summary>		
		public float Displayorder
		{
			get { return _displayorder; }
			set { _isChanged |= (_displayorder != value); _displayorder = value; }
		}
			
		/// <summary>
		/// 检验方法: KB/MIC
		/// </summary>		
		public string Testmethod
		{
			get { return _testmethod; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Testmethod", value, value.ToString());
				
				_isChanged |= (_testmethod != value); _testmethod = value;
			}
		}
			
		/// <summary>
		/// 状态  0-等待处理   1-提交  2-审核
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_isChanged |= (_status != value); _status = value;
			}
		}
			
		/// <summary>
		/// 记录生成日期
		/// </summary>		
		public DateTime Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// 0-以R,I,S的判定结果为报告结果,1- 则以kb 或mic 为报告结果
		/// </summary>		
		public float Reportoption
		{
			get { return _reportoption; }
			set { _isChanged |= (_reportoption != value); _reportoption = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
