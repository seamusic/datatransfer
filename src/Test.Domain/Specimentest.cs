/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Specimentest : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private string _subbarcode; 
		private float _dicttestgroupid; 
		private float _dicttestitemid; 
		private string _engname; 
		private string _testname; 
		private float _download; 
		private float _dictcontainerid; 
		private float _dictspecimentypeid; 
		private float _dictmedicaltypeid; 
		private string _tubegroup; 
		private string _testmethod; 
		private DateTime _releasedate; 
		private float _releaseby; 
		private DateTime _authorizedate; 
		private float _authorizeby; 
		private DateTime _createdate; 
		private float _dictlabdeptid; 
		private float _specimentestid; 
		private string _fastcode; 
		private string _testcode; 
		private float _dilution; 
		private string _englongname; 
		private string _engtestmethod; 
		private float _isexport; 
		private string _billed; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Specimentest()
		{
			_subbarcode = null; 
			_dicttestgroupid = 0; 
			_dicttestitemid = 0; 
			_engname = null; 
			_testname = null; 
			_download = 0; 
			_dictcontainerid = 0; 
			_dictspecimentypeid = 0; 
			_dictmedicaltypeid = 0; 
			_tubegroup = null; 
			_testmethod = null; 
			_releasedate = new DateTime(); 
			_releaseby = 0; 
			_authorizedate = new DateTime(); 
			_authorizeby = 0; 
			_createdate = new DateTime(); 
			_dictlabdeptid = 0; 
			_specimentestid = 0; 
			_fastcode = null; 
			_testcode = null; 
			_dilution = 0; 
			_englongname = null; 
			_engtestmethod = null; 
			_isexport = 0; 
			_billed = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 条码号
		/// </summary>		
		public string Subbarcode
		{
			get { return _subbarcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Subbarcode", value, value.ToString());
				
				_isChanged |= (_subbarcode != value); _subbarcode = value;
			}
		}
			
		/// <summary>
		/// 项目组合ID
		/// </summary>		
		public float Dicttestgroupid
		{
			get { return _dicttestgroupid; }
			set { _isChanged |= (_dicttestgroupid != value); _dicttestgroupid = value; }
		}
			
		/// <summary>
		/// 组合下属测试项内码
		/// </summary>		
		public float Dicttestitemid
		{
			get { return _dicttestitemid; }
			set { _isChanged |= (_dicttestitemid != value); _dicttestitemid = value; }
		}
			
		/// <summary>
		/// 测试项英文名
		/// </summary>		
		public string Engname
		{
			get { return _engname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Engname", value, value.ToString());
				
				_isChanged |= (_engname != value); _engname = value;
			}
		}
			
		/// <summary>
		/// 测试项名字
		/// </summary>		
		public string Testname
		{
			get { return _testname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Testname", value, value.ToString());
				
				_isChanged |= (_testname != value); _testname = value;
			}
		}
			
		/// <summary>
		/// 0-未下载  1-已下载
		/// </summary>		
		public float Download
		{
			get { return _download; }
			set { _isChanged |= (_download != value); _download = value; }
		}
			
		/// <summary>
		/// 容器类型
		/// </summary>		
		public float Dictcontainerid
		{
			get { return _dictcontainerid; }
			set { _isChanged |= (_dictcontainerid != value); _dictcontainerid = value; }
		}
			
		/// <summary>
		/// 标本类型
		/// </summary>		
		public float Dictspecimentypeid
		{
			get { return _dictspecimentypeid; }
			set { _isChanged |= (_dictspecimentypeid != value); _dictspecimentypeid = value; }
		}
			
		/// <summary>
		/// 医学专业组分类
		/// </summary>		
		public float Dictmedicaltypeid
		{
			get { return _dictmedicaltypeid; }
			set { _isChanged |= (_dictmedicaltypeid != value); _dictmedicaltypeid = value; }
		}
			
		/// <summary>
		/// 分管原则
		/// </summary>		
		public string Tubegroup
		{
			get { return _tubegroup; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Tubegroup", value, value.ToString());
				
				_isChanged |= (_tubegroup != value); _tubegroup = value;
			}
		}
			
		/// <summary>
		/// 检验方法
		/// </summary>		
		public string Testmethod
		{
			get { return _testmethod; }
			set	
			{
				if( value!= null && value.Length > 80)
					throw new ArgumentOutOfRangeException("Invalid value for Testmethod", value, value.ToString());
				
				_isChanged |= (_testmethod != value); _testmethod = value;
			}
		}
			
		/// <summary>
		/// 技术员初审时间
		/// </summary>		
		public DateTime Releasedate
		{
			get { return _releasedate; }
			set { _isChanged |= (_releasedate != value); _releasedate = value; }
		}
			
		/// <summary>
		/// 技术员初审
		/// </summary>		
		public float Releaseby
		{
			get { return _releaseby; }
			set { _isChanged |= (_releaseby != value); _releaseby = value; }
		}
			
		/// <summary>
		/// 审核时间
		/// </summary>		
		public DateTime Authorizedate
		{
			get { return _authorizedate; }
			set { _isChanged |= (_authorizedate != value); _authorizedate = value; }
		}
			
		/// <summary>
		/// 审核人
		/// </summary>		
		public float Authorizeby
		{
			get { return _authorizeby; }
			set { _isChanged |= (_authorizeby != value); _authorizeby = value; }
		}
			
		/// <summary>
		/// 记录生成日期
		/// </summary>		
		public DateTime Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// 物理实验室ID，对应表DictLibrary
		/// </summary>		
		public float Dictlabdeptid
		{
			get { return _dictlabdeptid; }
			set { _isChanged |= (_dictlabdeptid != value); _dictlabdeptid = value; }
		}
			
		/// <summary>
		/// 序列，主键ID
		/// </summary>		
		public float Specimentestid
		{
			get { return _specimentestid; }
			set { _isChanged |= (_specimentestid != value); _specimentestid = value; }
		}
			
		/// <summary>
		/// 助记码
		/// </summary>		
		public string Fastcode
		{
			get { return _fastcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());
				
				_isChanged |= (_fastcode != value); _fastcode = value;
			}
		}
			
		/// <summary>
		/// 测试项编码
		/// </summary>		
		public string Testcode
		{
			get { return _testcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Testcode", value, value.ToString());
				
				_isChanged |= (_testcode != value); _testcode = value;
			}
		}
			
		/// <summary>
		/// 稀释倍数
		/// </summary>		
		public float Dilution
		{
			get { return _dilution; }
			set { _isChanged |= (_dilution != value); _dilution = value; }
		}
			
		/// <summary>
		/// 英文长名称
		/// </summary>		
		public string Englongname
		{
			get { return _englongname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Englongname", value, value.ToString());
				
				_isChanged |= (_englongname != value); _englongname = value;
			}
		}
			
		/// <summary>
		/// 英文检验方法
		/// </summary>		
		public string Engtestmethod
		{
			get { return _engtestmethod; }
			set	
			{
				if( value!= null && value.Length > 80)
					throw new ArgumentOutOfRangeException("Invalid value for Engtestmethod", value, value.ToString());
				
				_isChanged |= (_engtestmethod != value); _engtestmethod = value;
			}
		}
			
		/// <summary>
		/// 是否曾经被导出过  0-否  1-是
		/// </summary>		
		public float Isexport
		{
			get { return _isexport; }
			set { _isChanged |= (_isexport != value); _isexport = value; }
		}
			
		/// <summary>
		/// 0-外包未生成账单清单  1- 已生成账单清单
		/// </summary>		
		public string Billed
		{
			get { return _billed; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Billed", value, value.ToString());
				
				_isChanged |= (_billed != value); _billed = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
