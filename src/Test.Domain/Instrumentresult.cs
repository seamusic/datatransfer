/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Instrumentresult : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _instrumentresultid; 
		private float _dictinstrumentid; 
		private string _subbarcode; 
		private float _dicttestitemid; 
		private string _batchno; 
		private DateTime _testdate; 
		private string _seq; 
		private string _sackno; 
		private string _trayno; 
		private string _testflag; 
		private string _result; 
		private string _isuse; 
		private DateTime _createdate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Instrumentresult()
		{
			_instrumentresultid = 0; 
			_dictinstrumentid = 0; 
			_subbarcode = null; 
			_dicttestitemid = 0; 
			_batchno = null; 
			_testdate = new DateTime(); 
			_seq = null; 
			_sackno = null; 
			_trayno = null; 
			_testflag = null; 
			_result = null; 
			_isuse = null; 
			_createdate = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，序列
		/// </summary>		
		public float Instrumentresultid
		{
			get { return _instrumentresultid; }
			set { _isChanged |= (_instrumentresultid != value); _instrumentresultid = value; }
		}
			
		/// <summary>
		/// 仪器ID，对应表DictInstrument
		/// </summary>		
		public float Dictinstrumentid
		{
			get { return _dictinstrumentid; }
			set { _isChanged |= (_dictinstrumentid != value); _dictinstrumentid = value; }
		}
			
		/// <summary>
		/// 子条码号
		/// </summary>		
		public string Subbarcode
		{
			get { return _subbarcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Subbarcode", value, value.ToString());
				
				_isChanged |= (_subbarcode != value); _subbarcode = value;
			}
		}
			
		/// <summary>
		/// 测试项ID
		/// </summary>		
		public float Dicttestitemid
		{
			get { return _dicttestitemid; }
			set { _isChanged |= (_dicttestitemid != value); _dicttestitemid = value; }
		}
			
		/// <summary>
		/// 批次号
		/// </summary>		
		public string Batchno
		{
			get { return _batchno; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Batchno", value, value.ToString());
				
				_isChanged |= (_batchno != value); _batchno = value;
			}
		}
			
		/// <summary>
		/// 测试日期
		/// </summary>		
		public DateTime Testdate
		{
			get { return _testdate; }
			set { _isChanged |= (_testdate != value); _testdate = value; }
		}
			
		/// <summary>
		/// 流水号
		/// </summary>		
		public string Seq
		{
			get { return _seq; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Seq", value, value.ToString());
				
				_isChanged |= (_seq != value); _seq = value;
			}
		}
			
		/// <summary>
		/// 架子号
		/// </summary>		
		public string Sackno
		{
			get { return _sackno; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Sackno", value, value.ToString());
				
				_isChanged |= (_sackno != value); _sackno = value;
			}
		}
			
		/// <summary>
		/// 盘号
		/// </summary>		
		public string Trayno
		{
			get { return _trayno; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Trayno", value, value.ToString());
				
				_isChanged |= (_trayno != value); _trayno = value;
			}
		}
			
		/// <summary>
		/// 形态学提示
		/// </summary>		
		public string Testflag
		{
			get { return _testflag; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Testflag", value, value.ToString());
				
				_isChanged |= (_testflag != value); _testflag = value;
			}
		}
			
		/// <summary>
		/// 结果
		/// </summary>		
		public string Result
		{
			get { return _result; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Result", value, value.ToString());
				
				_isChanged |= (_result != value); _result = value;
			}
		}
			
		/// <summary>
		/// 0-没有在用的仪器数据  1-当前在用的仪器数据
		/// </summary>		
		public string Isuse
		{
			get { return _isuse; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Isuse", value, value.ToString());
				
				_isChanged |= (_isuse != value); _isuse = value;
			}
		}
			
		/// <summary>
		/// 记录生成日期
		/// </summary>		
		public DateTime Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
