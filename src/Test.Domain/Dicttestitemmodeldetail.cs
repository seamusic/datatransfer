/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dicttestitemmodeldetail : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dicttestitemmodeldetailid; 
		private float _dicttestitemmodelid; 
		private float _dicttestitemid; 
		private string _wherecondition; 
		private string _wherevalue; 
		private string _wherejoin; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dicttestitemmodeldetail()
		{
			_dicttestitemmodeldetailid = 0; 
			_dicttestitemmodelid = 0; 
			_dicttestitemid = 0; 
			_wherecondition = null; 
			_wherevalue = null; 
			_wherejoin = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public float Dicttestitemmodeldetailid
		{
			get { return _dicttestitemmodeldetailid; }
			set { _isChanged |= (_dicttestitemmodeldetailid != value); _dicttestitemmodeldetailid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public float Dicttestitemmodelid
		{
			get { return _dicttestitemmodelid; }
			set { _isChanged |= (_dicttestitemmodelid != value); _dicttestitemmodelid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public float Dicttestitemid
		{
			get { return _dicttestitemid; }
			set { _isChanged |= (_dicttestitemid != value); _dicttestitemid = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Wherecondition
		{
			get { return _wherecondition; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Wherecondition", value, value.ToString());
				
				_isChanged |= (_wherecondition != value); _wherecondition = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Wherevalue
		{
			get { return _wherevalue; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Wherevalue", value, value.ToString());
				
				_isChanged |= (_wherevalue != value); _wherevalue = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Wherejoin
		{
			get { return _wherejoin; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Wherejoin", value, value.ToString());
				
				_isChanged |= (_wherejoin != value); _wherejoin = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
