/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Operationlog : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _operationlogid; 
		private string _barcode; 
		private string _operationtype; 
		private string _operation; 
		private float _operateby; 
		private DateTime _operatedate; 
		private string _remark; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Operationlog()
		{
			_operationlogid = 0; 
			_barcode = null; 
			_operationtype = null; 
			_operation = null; 
			_operateby = 0; 
			_operatedate = new DateTime(); 
			_remark = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自动ID
		/// </summary>		
		public float Operationlogid
		{
			get { return _operationlogid; }
			set { _isChanged |= (_operationlogid != value); _operationlogid = value; }
		}
			
		/// <summary>
		/// 条码号
		/// </summary>		
		public string Barcode
		{
			get { return _barcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Barcode", value, value.ToString());
				
				_isChanged |= (_barcode != value); _barcode = value;
			}
		}
			
		/// <summary>
		/// 操作类型
		/// </summary>		
		public string Operationtype
		{
			get { return _operationtype; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Operationtype", value, value.ToString());
				
				_isChanged |= (_operationtype != value); _operationtype = value;
			}
		}
			
		/// <summary>
		/// 操作内容
		/// </summary>		
		public string Operation
		{
			get { return _operation; }
			set	
			{
				if( value!= null && value.Length > 3000)
					throw new ArgumentOutOfRangeException("Invalid value for Operation", value, value.ToString());
				
				_isChanged |= (_operation != value); _operation = value;
			}
		}
			
		/// <summary>
		/// 操作者
		/// </summary>		
		public float Operateby
		{
			get { return _operateby; }
			set { _isChanged |= (_operateby != value); _operateby = value; }
		}
			
		/// <summary>
		/// 操作时间
		/// </summary>		
		public DateTime Operatedate
		{
			get { return _operatedate; }
			set { _isChanged |= (_operatedate != value); _operatedate = value; }
		}
			
		/// <summary>
		/// 备注
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
