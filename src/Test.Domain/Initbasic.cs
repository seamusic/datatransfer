/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Initbasic : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _basicid; 
		private string _basictype; 
		private string _basicvalue; 
		private string _basicname; 
		private string _remark; 
		private string _fastcode; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Initbasic()
		{
			_basicid = 0; 
			_basictype = null; 
			_basicvalue = null; 
			_basicname = null; 
			_remark = null; 
			_fastcode = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自动ID
		/// </summary>		
		public float Basicid
		{
			get { return _basicid; }
			set { _isChanged |= (_basicid != value); _basicid = value; }
		}
			
		/// <summary>
		/// 基本资料类别，例SEX，PATTYPE等
		/// </summary>		
		public string Basictype
		{
			get { return _basictype; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Basictype", value, value.ToString());
				
				_isChanged |= (_basictype != value); _basictype = value;
			}
		}
			
		/// <summary>
		/// 保存到业务表的值
		/// </summary>		
		public string Basicvalue
		{
			get { return _basicvalue; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Basicvalue", value, value.ToString());
				
				_isChanged |= (_basicvalue != value); _basicvalue = value;
			}
		}
			
		/// <summary>
		/// 界面显示的值
		/// </summary>		
		public string Basicname
		{
			get { return _basicname; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Basicname", value, value.ToString());
				
				_isChanged |= (_basicname != value); _basicname = value;
			}
		}
			
		/// <summary>
		/// 备注
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// 快捷录入码
		/// </summary>		
		public string Fastcode
		{
			get { return _fastcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());
				
				_isChanged |= (_fastcode != value); _fastcode = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
