/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Specimenmanage : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _specimenmanageid; 
		private string _rackbarcode; 
		private string _xpos; 
		private string _ypos; 
		private string _subbarcode; 
		private DateTime _indate; 
		private float _inby; 
		private DateTime _outdate; 
		private float _outby; 
		private string _status; 
		private string _remark; 
		private string _vitalsample; 
		private DateTime _expirydate; 
		private string _testdesc; 
		private DateTime _dropdate; 
		private float _dropby; 
		private DateTime _createdate; 
		private float _dicttuberackid; 
		private float _receiveby; 
		private DateTime _receivedate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Specimenmanage()
		{
			_specimenmanageid = 0; 
			_rackbarcode = null; 
			_xpos = null; 
			_ypos = null; 
			_subbarcode = null; 
			_indate = new DateTime(); 
			_inby = 0; 
			_outdate = new DateTime(); 
			_outby = 0; 
			_status = null; 
			_remark = null; 
			_vitalsample = null; 
			_expirydate = new DateTime(); 
			_testdesc = null; 
			_dropdate = new DateTime(); 
			_dropby = 0; 
			_createdate = new DateTime(); 
			_dicttuberackid = 0; 
			_receiveby = 0; 
			_receivedate = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，序列
		/// </summary>		
		public float Specimenmanageid
		{
			get { return _specimenmanageid; }
			set { _isChanged |= (_specimenmanageid != value); _specimenmanageid = value; }
		}
			
		/// <summary>
		/// 试管架条码号
		/// </summary>		
		public string Rackbarcode
		{
			get { return _rackbarcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Rackbarcode", value, value.ToString());
				
				_isChanged |= (_rackbarcode != value); _rackbarcode = value;
			}
		}
			
		/// <summary>
		/// 试管架的X坐标值
		/// </summary>		
		public string Xpos
		{
			get { return _xpos; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Xpos", value, value.ToString());
				
				_isChanged |= (_xpos != value); _xpos = value;
			}
		}
			
		/// <summary>
		/// 试管架的Y坐标值
		/// </summary>		
		public string Ypos
		{
			get { return _ypos; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Ypos", value, value.ToString());
				
				_isChanged |= (_ypos != value); _ypos = value;
			}
		}
			
		/// <summary>
		/// 条码号
		/// </summary>		
		public string Subbarcode
		{
			get { return _subbarcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Subbarcode", value, value.ToString());
				
				_isChanged |= (_subbarcode != value); _subbarcode = value;
			}
		}
			
		/// <summary>
		/// 入库日期
		/// </summary>		
		public DateTime Indate
		{
			get { return _indate; }
			set { _isChanged |= (_indate != value); _indate = value; }
		}
			
		/// <summary>
		/// 入库人
		/// </summary>		
		public float Inby
		{
			get { return _inby; }
			set { _isChanged |= (_inby != value); _inby = value; }
		}
			
		/// <summary>
		/// 出库日期
		/// </summary>		
		public DateTime Outdate
		{
			get { return _outdate; }
			set { _isChanged |= (_outdate != value); _outdate = value; }
		}
			
		/// <summary>
		/// 出库人
		/// </summary>		
		public float Outby
		{
			get { return _outby; }
			set { _isChanged |= (_outby != value); _outby = value; }
		}
			
		/// <summary>
		/// 状态，对应表INITBASIC
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_isChanged |= (_status != value); _status = value;
			}
		}
			
		/// <summary>
		/// 备注
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// 重要标本  0-否  1-是
		/// </summary>		
		public string Vitalsample
		{
			get { return _vitalsample; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Vitalsample", value, value.ToString());
				
				_isChanged |= (_vitalsample != value); _vitalsample = value;
			}
		}
			
		/// <summary>
		/// 失效日期
		/// </summary>		
		public DateTime Expirydate
		{
			get { return _expirydate; }
			set { _isChanged |= (_expirydate != value); _expirydate = value; }
		}
			
		/// <summary>
		/// 项目描述
		/// </summary>		
		public string Testdesc
		{
			get { return _testdesc; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Testdesc", value, value.ToString());
				
				_isChanged |= (_testdesc != value); _testdesc = value;
			}
		}
			
		/// <summary>
		/// 销毁日期
		/// </summary>		
		public DateTime Dropdate
		{
			get { return _dropdate; }
			set { _isChanged |= (_dropdate != value); _dropdate = value; }
		}
			
		/// <summary>
		/// 销毁人
		/// </summary>		
		public float Dropby
		{
			get { return _dropby; }
			set { _isChanged |= (_dropby != value); _dropby = value; }
		}
			
		/// <summary>
		/// 记录生成日期
		/// </summary>		
		public DateTime Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// 试管架ID，对应表DictTubeRack
		/// </summary>		
		public float Dicttuberackid
		{
			get { return _dicttuberackid; }
			set { _isChanged |= (_dicttuberackid != value); _dicttuberackid = value; }
		}
			
		/// <summary>
		/// 标本的客服接收人
		/// </summary>		
		public float Receiveby
		{
			get { return _receiveby; }
			set { _isChanged |= (_receiveby != value); _receiveby = value; }
		}
			
		/// <summary>
		/// 标本的客服接收时间
		/// </summary>		
		public DateTime Receivedate
		{
			get { return _receivedate; }
			set { _isChanged |= (_receivedate != value); _receivedate = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
