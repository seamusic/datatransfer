/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictstatcolumns : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictstatcolumnsid; 
		private float _dictstatheadid; 
		private string _fieldname; 
		private string _caption; 
		private float _fieldtype; 
		private float _colwidth; 
		private float _displayorder; 
		private float _groupindex; 
		private float _fixed; 
		private float _issummaryitem; 
		private float _isgroupsummaryitem; 
		private string _statmode; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictstatcolumns()
		{
			_dictstatcolumnsid = 0; 
			_dictstatheadid = 0; 
			_fieldname = null; 
			_caption = null; 
			_fieldtype = 0; 
			_colwidth = 0; 
			_displayorder = 0; 
			_groupindex = 0; 
			_fixed = 0; 
			_issummaryitem = 0; 
			_isgroupsummaryitem = 0; 
			_statmode = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>		
		public float Dictstatcolumnsid
		{
			get { return _dictstatcolumnsid; }
			set { _isChanged |= (_dictstatcolumnsid != value); _dictstatcolumnsid = value; }
		}
			
		/// <summary>
		/// 查询头表ID
		/// </summary>		
		public float Dictstatheadid
		{
			get { return _dictstatheadid; }
			set { _isChanged |= (_dictstatheadid != value); _dictstatheadid = value; }
		}
			
		/// <summary>
		/// 字段名称
		/// </summary>		
		public string Fieldname
		{
			get { return _fieldname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Fieldname", value, value.ToString());
				
				_isChanged |= (_fieldname != value); _fieldname = value;
			}
		}
			
		/// <summary>
		/// 标题
		/// </summary>		
		public string Caption
		{
			get { return _caption; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Caption", value, value.ToString());
				
				_isChanged |= (_caption != value); _caption = value;
			}
		}
			
		/// <summary>
		/// 字段类型，日期类型，数字类型，文本类型
		/// </summary>		
		public float Fieldtype
		{
			get { return _fieldtype; }
			set { _isChanged |= (_fieldtype != value); _fieldtype = value; }
		}
			
		/// <summary>
		/// 显示长度
		/// </summary>		
		public float Colwidth
		{
			get { return _colwidth; }
			set { _isChanged |= (_colwidth != value); _colwidth = value; }
		}
			
		/// <summary>
		/// 列显示顺序
		/// </summary>		
		public float Displayorder
		{
			get { return _displayorder; }
			set { _isChanged |= (_displayorder != value); _displayorder = value; }
		}
			
		/// <summary>
		/// 分组Id ，按Id来分先后顺序
		/// </summary>		
		public float Groupindex
		{
			get { return _groupindex; }
			set { _isChanged |= (_groupindex != value); _groupindex = value; }
		}
			
		/// <summary>
		/// 是否冻结栏
		/// </summary>		
		public float Fixed
		{
			get { return _fixed; }
			set { _isChanged |= (_fixed != value); _fixed = value; }
		}
			
		/// <summary>
		/// 是否显示总的合计
		/// </summary>		
		public float Issummaryitem
		{
			get { return _issummaryitem; }
			set { _isChanged |= (_issummaryitem != value); _issummaryitem = value; }
		}
			
		/// <summary>
		/// 是否显示分组合计
		/// </summary>		
		public float Isgroupsummaryitem
		{
			get { return _isgroupsummaryitem; }
			set { _isChanged |= (_isgroupsummaryitem != value); _isgroupsummaryitem = value; }
		}
			
		/// <summary>
		/// 统计方式
		/// </summary>		
		public string Statmode
		{
			get { return _statmode; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Statmode", value, value.ToString());
				
				_isChanged |= (_statmode != value); _statmode = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
