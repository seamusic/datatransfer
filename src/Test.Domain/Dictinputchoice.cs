/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictinputchoice : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictinputchoiceid; 
		private float _dictinputtemplateitemid; 
		private string _fastcode; 
		private string _itemname; 
		private float _displayorder; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictinputchoice()
		{
			_dictinputchoiceid = 0; 
			_dictinputtemplateitemid = 0; 
			_fastcode = null; 
			_itemname = null; 
			_displayorder = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自动ID
		/// </summary>		
		public float Dictinputchoiceid
		{
			get { return _dictinputchoiceid; }
			set { _isChanged |= (_dictinputchoiceid != value); _dictinputchoiceid = value; }
		}
			
		/// <summary>
		/// 输入模板项目ID
		/// </summary>		
		public float Dictinputtemplateitemid
		{
			get { return _dictinputtemplateitemid; }
			set { _isChanged |= (_dictinputtemplateitemid != value); _dictinputtemplateitemid = value; }
		}
			
		/// <summary>
		/// 助记码
		/// </summary>		
		public string Fastcode
		{
			get { return _fastcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());
				
				_isChanged |= (_fastcode != value); _fastcode = value;
			}
		}
			
		/// <summary>
		/// 项目名
		/// </summary>		
		public string Itemname
		{
			get { return _itemname; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Itemname", value, value.ToString());
				
				_isChanged |= (_itemname != value); _itemname = value;
			}
		}
			
		/// <summary>
		/// 打印报告顺序
		/// </summary>		
		public float Displayorder
		{
			get { return _displayorder; }
			set { _isChanged |= (_displayorder != value); _displayorder = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
