/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictqclotcenter : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictqclotid; 
		private string _lotnum; 
		private float _dictqccontrolid; 
		private string _uniqueid; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictqclotcenter()
		{
			_dictqclotid = 0; 
			_lotnum = null; 
			_dictqccontrolid = 0; 
			_uniqueid = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自增长
		/// </summary>		
		public float Dictqclotid
		{
			get { return _dictqclotid; }
			set { _isChanged |= (_dictqclotid != value); _dictqclotid = value; }
		}
			
		/// <summary>
		/// 批号
		/// </summary>		
		public string Lotnum
		{
			get { return _lotnum; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Lotnum", value, value.ToString());
				
				_isChanged |= (_lotnum != value); _lotnum = value;
			}
		}
			
		/// <summary>
		/// 水平ID
		/// </summary>		
		public float Dictqccontrolid
		{
			get { return _dictqccontrolid; }
			set { _isChanged |= (_dictqccontrolid != value); _dictqccontrolid = value; }
		}
			
		/// <summary>
		/// 全国统一码
		/// </summary>		
		public string Uniqueid
		{
			get { return _uniqueid; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Uniqueid", value, value.ToString());
				
				_isChanged |= (_uniqueid != value); _uniqueid = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
