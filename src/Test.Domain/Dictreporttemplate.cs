/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictreporttemplate : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictreporttemplateid; 
		private string _templatename; 
		private string _papersize; 
		private string _defaulttemplate; 
		private string _remark; 
		private float _versioncount; 
		private string _templatecode; 
		private float _paperrowcount; 
		private float _reportremarkcount; 
		private float _refrangecount; 
		private float _dictinputtemplateid; 
		private float _autoinputetemplate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictreporttemplate()
		{
			_dictreporttemplateid = 0; 
			_templatename = null; 
			_papersize = null; 
			_defaulttemplate = null; 
			_remark = null; 
			_versioncount = 0; 
			_templatecode = null; 
			_paperrowcount = 0; 
			_reportremarkcount = 0; 
			_refrangecount = 0; 
			_dictinputtemplateid = 0; 
			_autoinputetemplate = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，序列
		/// </summary>		
		public float Dictreporttemplateid
		{
			get { return _dictreporttemplateid; }
			set { _isChanged |= (_dictreporttemplateid != value); _dictreporttemplateid = value; }
		}
			
		/// <summary>
		/// 模板名
		/// </summary>		
		public string Templatename
		{
			get { return _templatename; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Templatename", value, value.ToString());
				
				_isChanged |= (_templatename != value); _templatename = value;
			}
		}
			
		/// <summary>
		/// A4/A5等纸张大小
		/// </summary>		
		public string Papersize
		{
			get { return _papersize; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Papersize", value, value.ToString());
				
				_isChanged |= (_papersize != value); _papersize = value;
			}
		}
			
		/// <summary>
		/// 默认模板
		/// </summary>		
		public string Defaulttemplate
		{
			get { return _defaulttemplate; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Defaulttemplate", value, value.ToString());
				
				_isChanged |= (_defaulttemplate != value); _defaulttemplate = value;
			}
		}
			
		/// <summary>
		/// 备注
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// 版本号，每次更新模板，值加1
		/// </summary>		
		public float Versioncount
		{
			get { return _versioncount; }
			set { _isChanged |= (_versioncount != value); _versioncount = value; }
		}
			
		/// <summary>
		/// 模板代号，不开放给用户修改
		/// </summary>		
		public string Templatecode
		{
			get { return _templatecode; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Templatecode", value, value.ToString());
				
				_isChanged |= (_templatecode != value); _templatecode = value;
			}
		}
			
		/// <summary>
		/// 需要换页时的记录数
		/// </summary>		
		public float Paperrowcount
		{
			get { return _paperrowcount; }
			set { _isChanged |= (_paperrowcount != value); _paperrowcount = value; }
		}
			
		/// <summary>
		/// 报告备注一行存放的文字数量
		/// </summary>		
		public float Reportremarkcount
		{
			get { return _reportremarkcount; }
			set { _isChanged |= (_reportremarkcount != value); _reportremarkcount = value; }
		}
			
		/// <summary>
		/// 参考范围一行能存放的文字数量
		/// </summary>		
		public float Refrangecount
		{
			get { return _refrangecount; }
			set { _isChanged |= (_refrangecount != value); _refrangecount = value; }
		}
			
		/// <summary>
		/// 报告对应的输入模板
		/// </summary>		
		public float Dictinputtemplateid
		{
			get { return _dictinputtemplateid; }
			set { _isChanged |= (_dictinputtemplateid != value); _dictinputtemplateid = value; }
		}
			
		/// <summary>
		/// 自动增加输入模板标志 为1时候自动增加
		/// </summary>		
		public float Autoinputetemplate
		{
			get { return _autoinputetemplate; }
			set { _isChanged |= (_autoinputetemplate != value); _autoinputetemplate = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
