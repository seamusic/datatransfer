/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictorganism : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictorganismid; 
		private string _fastcode; 
		private string _organismcode; 
		private string _organismename; 
		private string _organismcname; 
		private float _dictorganismgroupid; 
		private string _active; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictorganism()
		{
			_dictorganismid = 0; 
			_fastcode = null; 
			_organismcode = null; 
			_organismename = null; 
			_organismcname = null; 
			_dictorganismgroupid = 0; 
			_active = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自动ID
		/// </summary>		
		public float Dictorganismid
		{
			get { return _dictorganismid; }
			set { _isChanged |= (_dictorganismid != value); _dictorganismid = value; }
		}
			
		/// <summary>
		/// 助记码
		/// </summary>		
		public string Fastcode
		{
			get { return _fastcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());
				
				_isChanged |= (_fastcode != value); _fastcode = value;
			}
		}
			
		/// <summary>
		/// 细菌代码
		/// </summary>		
		public string Organismcode
		{
			get { return _organismcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Organismcode", value, value.ToString());
				
				_isChanged |= (_organismcode != value); _organismcode = value;
			}
		}
			
		/// <summary>
		/// 细菌英文名
		/// </summary>		
		public string Organismename
		{
			get { return _organismename; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Organismename", value, value.ToString());
				
				_isChanged |= (_organismename != value); _organismename = value;
			}
		}
			
		/// <summary>
		/// 细菌中文名
		/// </summary>		
		public string Organismcname
		{
			get { return _organismcname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Organismcname", value, value.ToString());
				
				_isChanged |= (_organismcname != value); _organismcname = value;
			}
		}
			
		/// <summary>
		/// 细菌分组,对应DICTORGANISM表
		/// </summary>		
		public float Dictorganismgroupid
		{
			get { return _dictorganismgroupid; }
			set { _isChanged |= (_dictorganismgroupid != value); _dictorganismgroupid = value; }
		}
			
		/// <summary>
		/// 是否可用0-可用  1-不可用
		/// </summary>		
		public string Active
		{
			get { return _active; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());
				
				_isChanged |= (_active != value); _active = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
