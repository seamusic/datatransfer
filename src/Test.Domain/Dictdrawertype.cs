/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictdrawertype : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictdrawertypeid; 
		private string _typecode; 
		private string _typename; 
		private float _batchs; 
		private float _batchcount; 
		private string _remark; 
		private string _active; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictdrawertype()
		{
			_dictdrawertypeid = 0; 
			_typecode = null; 
			_typename = null; 
			_batchs = 0; 
			_batchcount = 0; 
			_remark = null; 
			_active = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键,自增长
		/// </summary>		
		public float Dictdrawertypeid
		{
			get { return _dictdrawertypeid; }
			set { _isChanged |= (_dictdrawertypeid != value); _dictdrawertypeid = value; }
		}
			
		/// <summary>
		/// 抽屉类型编号
		/// </summary>		
		public string Typecode
		{
			get { return _typecode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Typecode", value, value.ToString());
				
				_isChanged |= (_typecode != value); _typecode = value;
			}
		}
			
		/// <summary>
		/// 抽屉类型名称
		/// </summary>		
		public string Typename
		{
			get { return _typename; }
			set	
			{
				if( value!= null && value.Length > 80)
					throw new ArgumentOutOfRangeException("Invalid value for Typename", value, value.ToString());
				
				_isChanged |= (_typename != value); _typename = value;
			}
		}
			
		/// <summary>
		/// 批次数量
		/// </summary>		
		public float Batchs
		{
			get { return _batchs; }
			set { _isChanged |= (_batchs != value); _batchs = value; }
		}
			
		/// <summary>
		/// 批次存放验单数量
		/// </summary>		
		public float Batchcount
		{
			get { return _batchcount; }
			set { _isChanged |= (_batchcount != value); _batchcount = value; }
		}
			
		/// <summary>
		/// 备注
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// 是否可用  0-否  1- 是
		/// </summary>		
		public string Active
		{
			get { return _active; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());
				
				_isChanged |= (_active != value); _active = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
