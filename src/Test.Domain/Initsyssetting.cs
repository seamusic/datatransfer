/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Initsyssetting : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private string _sitecode; 
		private string _sitename; 
		private string _fax; 
		private string _phone; 
		private string _address; 
		private float _presetid; 
		private string _generatepdf; 
		private string _electronicsignature; 
		private float _barcodelenth; 
		private string _genpdf; 
		private string _ca; 
		private string _copyright; 
		private string _footerremark; 
		private string _esitename; 
		private string _website; 
		private string _pathologyaddress; 
		private string _pathologyheader; 
		private string _pdfpath; 
		private string _showdoctor; 
		private string _companyengaddress; 
		private string _companyengpathologyaddress; 
		private float _quickflow; 
		private string _remark; 
		private string _pathologyca; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Initsyssetting()
		{
			_sitecode = null; 
			_sitename = null; 
			_fax = null; 
			_phone = null; 
			_address = null; 
			_presetid = 0; 
			_generatepdf = null; 
			_electronicsignature = null; 
			_barcodelenth = 0; 
			_genpdf = null; 
			_ca = null; 
			_copyright = null; 
			_footerremark = null; 
			_esitename = null; 
			_website = null; 
			_pathologyaddress = null; 
			_pathologyheader = null; 
			_pdfpath = null; 
			_showdoctor = null; 
			_companyengaddress = null; 
			_companyengpathologyaddress = null; 
			_quickflow = 0; 
			_remark = null; 
			_pathologyca = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 地点代号，例GZ，SH
		/// </summary>		
		public string Sitecode
		{
			get { return _sitecode; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Sitecode", value, value.ToString());
				
				_isChanged |= (_sitecode != value); _sitecode = value;
			}
		}
			
		/// <summary>
		/// 分点名称
		/// </summary>		
		public string Sitename
		{
			get { return _sitename; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Sitename", value, value.ToString());
				
				_isChanged |= (_sitename != value); _sitename = value;
			}
		}
			
		/// <summary>
		/// 传真
		/// </summary>		
		public string Fax
		{
			get { return _fax; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Fax", value, value.ToString());
				
				_isChanged |= (_fax != value); _fax = value;
			}
		}
			
		/// <summary>
		/// 电话
		/// </summary>		
		public string Phone
		{
			get { return _phone; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Phone", value, value.ToString());
				
				_isChanged |= (_phone != value); _phone = value;
			}
		}
			
		/// <summary>
		/// 地址
		/// </summary>		
		public string Address
		{
			get { return _address; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Address", value, value.ToString());
				
				_isChanged |= (_address != value); _address = value;
			}
		}
			
		/// <summary>
		/// 预设前缀，一般用作自增长主键的前键值，例广州预设为20开头
		/// </summary>		
		public float Presetid
		{
			get { return _presetid; }
			set { _isChanged |= (_presetid != value); _presetid = value; }
		}
			
		/// <summary>
		/// 是否需要生成PDF
		/// </summary>		
		public string Generatepdf
		{
			get { return _generatepdf; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Generatepdf", value, value.ToString());
				
				_isChanged |= (_generatepdf != value); _generatepdf = value;
			}
		}
			
		/// <summary>
		/// 是否需要电子签名
		/// </summary>		
		public string Electronicsignature
		{
			get { return _electronicsignature; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Electronicsignature", value, value.ToString());
				
				_isChanged |= (_electronicsignature != value); _electronicsignature = value;
			}
		}
			
		/// <summary>
		/// 条码长度设置
		/// </summary>		
		public float Barcodelenth
		{
			get { return _barcodelenth; }
			set { _isChanged |= (_barcodelenth != value); _barcodelenth = value; }
		}
			
		/// <summary>
		/// 是否生成PDF，0-否 1-是
		/// </summary>		
		public string Genpdf
		{
			get { return _genpdf; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Genpdf", value, value.ToString());
				
				_isChanged |= (_genpdf != value); _genpdf = value;
			}
		}
			
		/// <summary>
		/// 是否数字签名报告，0-否 1-是
		/// </summary>		
		public string Ca
		{
			get { return _ca; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Ca", value, value.ToString());
				
				_isChanged |= (_ca != value); _ca = value;
			}
		}
			
		/// <summary>
		/// 版权声明
		/// </summary>		
		public string Copyright
		{
			get { return _copyright; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Copyright", value, value.ToString());
				
				_isChanged |= (_copyright != value); _copyright = value;
			}
		}
			
		/// <summary>
		/// 报告页脚备注
		/// </summary>		
		public string Footerremark
		{
			get { return _footerremark; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Footerremark", value, value.ToString());
				
				_isChanged |= (_footerremark != value); _footerremark = value;
			}
		}
			
		/// <summary>
		/// 分点英文名称
		/// </summary>		
		public string Esitename
		{
			get { return _esitename; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Esitename", value, value.ToString());
				
				_isChanged |= (_esitename != value); _esitename = value;
			}
		}
			
		/// <summary>
		/// 网站名称
		/// </summary>		
		public string Website
		{
			get { return _website; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Website", value, value.ToString());
				
				_isChanged |= (_website != value); _website = value;
			}
		}
			
		/// <summary>
		/// 病理送检地址/报告显示公司名
		/// </summary>		
		public string Pathologyaddress
		{
			get { return _pathologyaddress; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Pathologyaddress", value, value.ToString());
				
				_isChanged |= (_pathologyaddress != value); _pathologyaddress = value;
			}
		}
			
		/// <summary>
		/// 病理报告抬头
		/// </summary>		
		public string Pathologyheader
		{
			get { return _pathologyheader; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Pathologyheader", value, value.ToString());
				
				_isChanged |= (_pathologyheader != value); _pathologyheader = value;
			}
		}
			
		/// <summary>
		/// PDF保存路径
		/// </summary>		
		public string Pdfpath
		{
			get { return _pdfpath; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Pdfpath", value, value.ToString());
				
				_isChanged |= (_pdfpath != value); _pdfpath = value;
			}
		}
			
		/// <summary>
		/// 是否显示病理诊断医生1-显示  0-不显示
		/// </summary>		
		public string Showdoctor
		{
			get { return _showdoctor; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Showdoctor", value, value.ToString());
				
				_isChanged |= (_showdoctor != value); _showdoctor = value;
			}
		}
			
		/// <summary>
		/// 常规实验室英文地址
		/// </summary>		
		public string Companyengaddress
		{
			get { return _companyengaddress; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Companyengaddress", value, value.ToString());
				
				_isChanged |= (_companyengaddress != value); _companyengaddress = value;
			}
		}
			
		/// <summary>
		/// 病理实验室英文地址
		/// </summary>		
		public string Companyengpathologyaddress
		{
			get { return _companyengpathologyaddress; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Companyengpathologyaddress", value, value.ToString());
				
				_isChanged |= (_companyengpathologyaddress != value); _companyengpathologyaddress = value;
			}
		}
			
		/// <summary>
		/// 简易录单设置   0-正常录单  1-快速录单，录入后直接可以进行样本准备
		/// </summary>		
		public float Quickflow
		{
			get { return _quickflow; }
			set { _isChanged |= (_quickflow != value); _quickflow = value; }
		}
			
		/// <summary>
		/// 对当前使用数据库的说明
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// 是否对病理报告进行数字签名报告，0-否 1-是
		/// </summary>		
		public string Pathologyca
		{
			get { return _pathologyca; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Pathologyca", value, value.ToString());
				
				_isChanged |= (_pathologyca != value); _pathologyca = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
