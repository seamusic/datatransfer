/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Specinstrmenttest : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private string _subbarcode; 
		private float _dictinstrumentid; 
		private float _dicttestitemid; 
		private string _reflow; 
		private string _refhigh; 
		private string _textshow; 
		private string _paniclow; 
		private string _panichigh; 
		private string _engtextshow; 
		private string _engremark; 
		private string _remark; 
		private string _hlflag; 
		private string _panicflag; 
		private string _deltaflag; 
		private DateTime _createdate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Specinstrmenttest()
		{
			_subbarcode = null; 
			_dictinstrumentid = 0; 
			_dicttestitemid = 0; 
			_reflow = null; 
			_refhigh = null; 
			_textshow = null; 
			_paniclow = null; 
			_panichigh = null; 
			_engtextshow = null; 
			_engremark = null; 
			_remark = null; 
			_hlflag = null; 
			_panicflag = null; 
			_deltaflag = null; 
			_createdate = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 子条码号
		/// </summary>		
		public string Subbarcode
		{
			get { return _subbarcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Subbarcode", value, value.ToString());
				
				_isChanged |= (_subbarcode != value); _subbarcode = value;
			}
		}
			
		/// <summary>
		/// 仪器ID
		/// </summary>		
		public float Dictinstrumentid
		{
			get { return _dictinstrumentid; }
			set { _isChanged |= (_dictinstrumentid != value); _dictinstrumentid = value; }
		}
			
		/// <summary>
		/// 项目ID
		/// </summary>		
		public float Dicttestitemid
		{
			get { return _dicttestitemid; }
			set { _isChanged |= (_dicttestitemid != value); _dicttestitemid = value; }
		}
			
		/// <summary>
		/// 参考低值

		/// </summary>		
		public string Reflow
		{
			get { return _reflow; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Reflow", value, value.ToString());
				
				_isChanged |= (_reflow != value); _reflow = value;
			}
		}
			
		/// <summary>
		/// 参考高值

		/// </summary>		
		public string Refhigh
		{
			get { return _refhigh; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Refhigh", value, value.ToString());
				
				_isChanged |= (_refhigh != value); _refhigh = value;
			}
		}
			
		/// <summary>
		/// 文字参考范围

		/// </summary>		
		public string Textshow
		{
			get { return _textshow; }
			set	
			{
				if( value!= null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Textshow", value, value.ToString());
				
				_isChanged |= (_textshow != value); _textshow = value;
			}
		}
			
		/// <summary>
		/// 危险低值

		/// </summary>		
		public string Paniclow
		{
			get { return _paniclow; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Paniclow", value, value.ToString());
				
				_isChanged |= (_paniclow != value); _paniclow = value;
			}
		}
			
		/// <summary>
		/// 危险高值

		/// </summary>		
		public string Panichigh
		{
			get { return _panichigh; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Panichigh", value, value.ToString());
				
				_isChanged |= (_panichigh != value); _panichigh = value;
			}
		}
			
		/// <summary>
		/// 英文文字参考范围

		/// </summary>		
		public string Engtextshow
		{
			get { return _engtextshow; }
			set	
			{
				if( value!= null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Engtextshow", value, value.ToString());
				
				_isChanged |= (_engtextshow != value); _engtextshow = value;
			}
		}
			
		/// <summary>
		/// 英文参考范围备注

		/// </summary>		
		public string Engremark
		{
			get { return _engremark; }
			set	
			{
				if( value!= null && value.Length > 300)
					throw new ArgumentOutOfRangeException("Invalid value for Engremark", value, value.ToString());
				
				_isChanged |= (_engremark != value); _engremark = value;
			}
		}
			
		/// <summary>
		/// 参考范围备注
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 300)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// 高低值标志
		/// </summary>		
		public string Hlflag
		{
			get { return _hlflag; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Hlflag", value, value.ToString());
				
				_isChanged |= (_hlflag != value); _hlflag = value;
			}
		}
			
		/// <summary>
		/// 危险值标志
		/// </summary>		
		public string Panicflag
		{
			get { return _panicflag; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Panicflag", value, value.ToString());
				
				_isChanged |= (_panicflag != value); _panicflag = value;
			}
		}
			
		/// <summary>
		/// 上次对比标志
		/// </summary>		
		public string Deltaflag
		{
			get { return _deltaflag; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Deltaflag", value, value.ToString());
				
				_isChanged |= (_deltaflag != value); _deltaflag = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
