/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Specimenheaddetail : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private string _barcode; 
		private string _subbarcode; 
		private DateTime _receivedate; 
		private float _receiveby; 
		private DateTime _editdate; 
		private float _editby; 
		private DateTime _releasedate; 
		private float _releaseby; 
		private DateTime _verifydate; 
		private float _verifyby; 
		private DateTime _authorizedate; 
		private float _authorizeby; 
		private DateTime _printdate; 
		private float _printby; 
		private DateTime _canceldate; 
		private float _cancelby; 
		private string _specimenstatus; 
		private string _status; 
		private string _reportremark; 
		private float _pickupdoctor; 
		private string _source; 
		private string _clinicremark; 
		private float _dictspecimentypeid; 
		private float _dictlabdeptid; 
		private DateTime _createdate; 
		private string _hashcode; 
		private DateTime _signaturedate; 
		private float _signatureby; 
		private float _cancelcount; 
		private string _pathologyqcremark; 
		private string _applylistprinted; 
		private string _transed; 
		private string _sqtransed; 
		private string _reportremark2; 
		private string _pathologyqc; 
		private string _pathologynatureremark; 
		private string _pathologynature; 
		private string _pathologyassessment; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Specimenheaddetail()
		{
			_barcode = null; 
			_subbarcode = null; 
			_receivedate = new DateTime(); 
			_receiveby = 0; 
			_editdate = new DateTime(); 
			_editby = 0; 
			_releasedate = new DateTime(); 
			_releaseby = 0; 
			_verifydate = new DateTime(); 
			_verifyby = 0; 
			_authorizedate = new DateTime(); 
			_authorizeby = 0; 
			_printdate = new DateTime(); 
			_printby = 0; 
			_canceldate = new DateTime(); 
			_cancelby = 0; 
			_specimenstatus = null; 
			_status = null; 
			_reportremark = null; 
			_pickupdoctor = 0; 
			_source = null; 
			_clinicremark = null; 
			_dictspecimentypeid = 0; 
			_dictlabdeptid = 0; 
			_createdate = new DateTime(); 
			_hashcode = null; 
			_signaturedate = new DateTime(); 
			_signatureby = 0; 
			_cancelcount = 0; 
			_pathologyqcremark = null; 
			_applylistprinted = null; 
			_transed = null; 
			_sqtransed = null; 
			_reportremark2 = null; 
			_pathologyqc = null; 
			_pathologynatureremark = null; 
			_pathologynature = null; 
			_pathologyassessment = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 条码号
		/// </summary>		
		public string Barcode
		{
			get { return _barcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Barcode", value, value.ToString());
				
				_isChanged |= (_barcode != value); _barcode = value;
			}
		}
			
		/// <summary>
		/// 子条码号，如没有分管，则此条码号与条码号相同
		/// </summary>		
		public string Subbarcode
		{
			get { return _subbarcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Subbarcode", value, value.ToString());
				
				_isChanged |= (_subbarcode != value); _subbarcode = value;
			}
		}
			
		/// <summary>
		/// 标本接收时间
		/// </summary>		
		public DateTime Receivedate
		{
			get { return _receivedate; }
			set { _isChanged |= (_receivedate != value); _receivedate = value; }
		}
			
		/// <summary>
		/// 实验室接收人
		/// </summary>		
		public float Receiveby
		{
			get { return _receiveby; }
			set { _isChanged |= (_receiveby != value); _receiveby = value; }
		}
			
		/// <summary>
		/// 编辑时间
		/// </summary>		
		public DateTime Editdate
		{
			get { return _editdate; }
			set { _isChanged |= (_editdate != value); _editdate = value; }
		}
			
		/// <summary>
		/// 编辑人
		/// </summary>		
		public float Editby
		{
			get { return _editby; }
			set { _isChanged |= (_editby != value); _editby = value; }
		}
			
		/// <summary>
		/// 技术员初审时间
		/// </summary>		
		public DateTime Releasedate
		{
			get { return _releasedate; }
			set { _isChanged |= (_releasedate != value); _releasedate = value; }
		}
			
		/// <summary>
		/// 技术员初审/病理的初诊医生
		/// </summary>		
		public float Releaseby
		{
			get { return _releaseby; }
			set { _isChanged |= (_releaseby != value); _releaseby = value; }
		}
			
		/// <summary>
		/// 技术员校验时间
		/// </summary>		
		public DateTime Verifydate
		{
			get { return _verifydate; }
			set { _isChanged |= (_verifydate != value); _verifydate = value; }
		}
			
		/// <summary>
		/// 校验人
		/// </summary>		
		public float Verifyby
		{
			get { return _verifyby; }
			set { _isChanged |= (_verifyby != value); _verifyby = value; }
		}
			
		/// <summary>
		/// 审核时间
		/// </summary>		
		public DateTime Authorizedate
		{
			get { return _authorizedate; }
			set { _isChanged |= (_authorizedate != value); _authorizedate = value; }
		}
			
		/// <summary>
		/// 审核人/病理的复诊医生
		/// </summary>		
		public float Authorizeby
		{
			get { return _authorizeby; }
			set { _isChanged |= (_authorizeby != value); _authorizeby = value; }
		}
			
		/// <summary>
		/// 打印时间
		/// </summary>		
		public DateTime Printdate
		{
			get { return _printdate; }
			set { _isChanged |= (_printdate != value); _printdate = value; }
		}
			
		/// <summary>
		/// 打印人
		/// </summary>		
		public float Printby
		{
			get { return _printby; }
			set { _isChanged |= (_printby != value); _printby = value; }
		}
			
		/// <summary>
		/// 作废时间
		/// </summary>		
		public DateTime Canceldate
		{
			get { return _canceldate; }
			set { _isChanged |= (_canceldate != value); _canceldate = value; }
		}
			
		/// <summary>
		/// 作废人
		/// </summary>		
		public float Cancelby
		{
			get { return _cancelby; }
			set { _isChanged |= (_cancelby != value); _cancelby = value; }
		}
			
		/// <summary>
		/// 标本状态
		/// </summary>		
		public string Specimenstatus
		{
			get { return _specimenstatus; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Specimenstatus", value, value.ToString());
				
				_isChanged |= (_specimenstatus != value); _specimenstatus = value;
			}
		}
			
		/// <summary>
		/// 状态值，对应表INITBASIC
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_isChanged |= (_status != value); _status = value;
			}
		}
			
		/// <summary>
		/// 报告备注
		/// </summary>		
		public string Reportremark
		{
			get { return _reportremark; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Reportremark", value, value.ToString());
				
				_isChanged |= (_reportremark != value); _reportremark = value;
			}
		}
			
		/// <summary>
		/// 病理的取材医生
		/// </summary>		
		public float Pickupdoctor
		{
			get { return _pickupdoctor; }
			set { _isChanged |= (_pickupdoctor != value); _pickupdoctor = value; }
		}
			
		/// <summary>
		/// 病理的取材部位
		/// </summary>		
		public string Source
		{
			get { return _source; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Source", value, value.ToString());
				
				_isChanged |= (_source != value); _source = value;
			}
		}
			
		/// <summary>
		/// 病理的临床备注
		/// </summary>		
		public string Clinicremark
		{
			get { return _clinicremark; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Clinicremark", value, value.ToString());
				
				_isChanged |= (_clinicremark != value); _clinicremark = value;
			}
		}
			
		/// <summary>
		/// 样本类型，对应表DictLibrary
		/// </summary>		
		public float Dictspecimentypeid
		{
			get { return _dictspecimentypeid; }
			set { _isChanged |= (_dictspecimentypeid != value); _dictspecimentypeid = value; }
		}
			
		/// <summary>
		/// 检验室科别，对应表DictLibrary
		/// </summary>		
		public float Dictlabdeptid
		{
			get { return _dictlabdeptid; }
			set { _isChanged |= (_dictlabdeptid != value); _dictlabdeptid = value; }
		}
			
		/// <summary>
		/// 生成日期
		/// </summary>		
		public DateTime Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// 数字签名Hash码
		/// </summary>		
		public string Hashcode
		{
			get { return _hashcode; }
			set	
			{
				if( value!= null && value.Length > 256)
					throw new ArgumentOutOfRangeException("Invalid value for Hashcode", value, value.ToString());
				
				_isChanged |= (_hashcode != value); _hashcode = value;
			}
		}
			
		/// <summary>
		/// 数字签名日期
		/// </summary>		
		public DateTime Signaturedate
		{
			get { return _signaturedate; }
			set { _isChanged |= (_signaturedate != value); _signaturedate = value; }
		}
			
		/// <summary>
		/// 数字签名人
		/// </summary>		
		public float Signatureby
		{
			get { return _signatureby; }
			set { _isChanged |= (_signatureby != value); _signatureby = value; }
		}
			
		/// <summary>
		/// 取消审核的次数
		/// </summary>		
		public float Cancelcount
		{
			get { return _cancelcount; }
			set { _isChanged |= (_cancelcount != value); _cancelcount = value; }
		}
			
		/// <summary>
		/// 病理质控备注
		/// </summary>		
		public string Pathologyqcremark
		{
			get { return _pathologyqcremark; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Pathologyqcremark", value, value.ToString());
				
				_isChanged |= (_pathologyqcremark != value); _pathologyqcremark = value;
			}
		}
			
		/// <summary>
		/// 外包申请单是否打印0 未打印  1已打印
		/// </summary>		
		public string Applylistprinted
		{
			get { return _applylistprinted; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Applylistprinted", value, value.ToString());
				
				_isChanged |= (_applylistprinted != value); _applylistprinted = value;
			}
		}
			
		/// <summary>
		/// 传输状态，0未传输；1已传输
		/// </summary>		
		public string Transed
		{
			get { return _transed; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Transed", value, value.ToString());
				
				_isChanged |= (_transed != value); _transed = value;
			}
		}
			
		/// <summary>
		/// 社区传输状态，0未传输；1已传输
		/// </summary>		
		public string Sqtransed
		{
			get { return _sqtransed; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Sqtransed", value, value.ToString());
				
				_isChanged |= (_sqtransed != value); _sqtransed = value;
			}
		}
			
		/// <summary>
		/// 自动建议解释存放字段，此建议解释由系统自动生成。
		/// </summary>		
		public string Reportremark2
		{
			get { return _reportremark2; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Reportremark2", value, value.ToString());
				
				_isChanged |= (_reportremark2 != value); _reportremark2 = value;
			}
		}
			
		/// <summary>
		/// 是否是质控备注
		/// </summary>		
		public string Pathologyqc
		{
			get { return _pathologyqc; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Pathologyqc", value, value.ToString());
				
				_isChanged |= (_pathologyqc != value); _pathologyqc = value;
			}
		}
			
		/// <summary>
		/// 病例性质备注
		/// </summary>		
		public string Pathologynatureremark
		{
			get { return _pathologynatureremark; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Pathologynatureremark", value, value.ToString());
				
				_isChanged |= (_pathologynatureremark != value); _pathologynatureremark = value;
			}
		}
			
		/// <summary>
		/// 病例性质：0 良性。1 交界 。 2恶性。默认0
		/// </summary>		
		public string Pathologynature
		{
			get { return _pathologynature; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Pathologynature", value, value.ToString());
				
				_isChanged |= (_pathologynature != value); _pathologynature = value;
			}
		}
			
		/// <summary>
		/// 病理玻片质量评估
		/// </summary>		
		public string Pathologyassessment
		{
			get { return _pathologyassessment; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Pathologyassessment", value, value.ToString());
				
				_isChanged |= (_pathologyassessment != value); _pathologyassessment = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
