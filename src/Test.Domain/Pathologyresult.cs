/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Pathologyresult : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _pathologyresultid; 
		private string _subbarcode; 
		private float _dictinputtemplateitemid; 
		private string _templatename; 
		private float _parentid; 
		private float _treelevel; 
		private string _itemname; 
		private string _result; 
		private float _displayorder; 
		private DateTime _createdate; 
		private string _report; 
		private string _itemcode; 
		private float _dicttestitemid; 
		private string _transed; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Pathologyresult()
		{
			_pathologyresultid = 0; 
			_subbarcode = null; 
			_dictinputtemplateitemid = 0; 
			_templatename = null; 
			_parentid = 0; 
			_treelevel = 0; 
			_itemname = null; 
			_result = null; 
			_displayorder = 0; 
			_createdate = new DateTime(); 
			_report = null; 
			_itemcode = null; 
			_dicttestitemid = 0; 
			_transed = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自增长
		/// </summary>		
		public float Pathologyresultid
		{
			get { return _pathologyresultid; }
			set { _isChanged |= (_pathologyresultid != value); _pathologyresultid = value; }
		}
			
		/// <summary>
		/// 子条码号
		/// </summary>		
		public string Subbarcode
		{
			get { return _subbarcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Subbarcode", value, value.ToString());
				
				_isChanged |= (_subbarcode != value); _subbarcode = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public float Dictinputtemplateitemid
		{
			get { return _dictinputtemplateitemid; }
			set { _isChanged |= (_dictinputtemplateitemid != value); _dictinputtemplateitemid = value; }
		}
			
		/// <summary>
		/// 模板名
		/// </summary>		
		public string Templatename
		{
			get { return _templatename; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Templatename", value, value.ToString());
				
				_isChanged |= (_templatename != value); _templatename = value;
			}
		}
			
		/// <summary>
		/// 所属父亲ID
		/// </summary>		
		public float Parentid
		{
			get { return _parentid; }
			set { _isChanged |= (_parentid != value); _parentid = value; }
		}
			
		/// <summary>
		/// 所在层数
		/// </summary>		
		public float Treelevel
		{
			get { return _treelevel; }
			set { _isChanged |= (_treelevel != value); _treelevel = value; }
		}
			
		/// <summary>
		/// 项目名字
		/// </summary>		
		public string Itemname
		{
			get { return _itemname; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Itemname", value, value.ToString());
				
				_isChanged |= (_itemname != value); _itemname = value;
			}
		}
			
		/// <summary>
		/// 结果
		/// </summary>		
		public string Result
		{
			get { return _result; }
			set	
			{
				if( value!= null && value.Length > 3000)
					throw new ArgumentOutOfRangeException("Invalid value for Result", value, value.ToString());
				
				_isChanged |= (_result != value); _result = value;
			}
		}
			
		/// <summary>
		/// 打印报告顺序
		/// </summary>		
		public float Displayorder
		{
			get { return _displayorder; }
			set { _isChanged |= (_displayorder != value); _displayorder = value; }
		}
			
		/// <summary>
		/// 生成日期
		/// </summary>		
		public DateTime Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// 是否打印报告0-否  1-是
		/// </summary>		
		public string Report
		{
			get { return _report; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Report", value, value.ToString());
				
				_isChanged |= (_report != value); _report = value;
			}
		}
			
		/// <summary>
		/// 项目编码
		/// </summary>		
		public string Itemcode
		{
			get { return _itemcode; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Itemcode", value, value.ToString());
				
				_isChanged |= (_itemcode != value); _itemcode = value;
			}
		}
			
		/// <summary>
		/// 项目Id
		/// </summary>		
		public float Dicttestitemid
		{
			get { return _dicttestitemid; }
			set { _isChanged |= (_dicttestitemid != value); _dicttestitemid = value; }
		}
			
		/// <summary>
		/// 大众平台结果传输标志。0未传输，1传输
		/// </summary>		
		public string Transed
		{
			get { return _transed; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Transed", value, value.ToString());
				
				_isChanged |= (_transed != value); _transed = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
