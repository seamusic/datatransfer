/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Specinstrmentdetail : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private string _subbarcode; 
		private float _dictinstrumentid; 
		private string _releaseresultexception; 
		private string _releaseexception; 
		private string _testresultexception; 
		private string _testresultempty; 
		private DateTime _createdate; 
		private string _redotestexception; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Specinstrmentdetail()
		{
			_subbarcode = null; 
			_dictinstrumentid = 0; 
			_releaseresultexception = null; 
			_releaseexception = null; 
			_testresultexception = null; 
			_testresultempty = null; 
			_createdate = new DateTime(); 
			_redotestexception = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 子条码号
		/// </summary>		
		public string Subbarcode
		{
			get { return _subbarcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Subbarcode", value, value.ToString());
				
				_isChanged |= (_subbarcode != value); _subbarcode = value;
			}
		}
			
		/// <summary>
		/// 仪器ID
		/// </summary>		
		public float Dictinstrumentid
		{
			get { return _dictinstrumentid; }
			set { _isChanged |= (_dictinstrumentid != value); _dictinstrumentid = value; }
		}
			
		/// <summary>
		/// 提交状态下是否有结果异常。0:无 ；1:结果异常；2:结果危急
		/// </summary>		
		public string Releaseresultexception
		{
			get { return _releaseresultexception; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Releaseresultexception", value, value.ToString());
				
				_isChanged |= (_releaseresultexception != value); _releaseresultexception = value;
			}
		}
			
		/// <summary>
		/// 是否有异常提交的项目结果。0:无 ；1:有
		/// </summary>		
		public string Releaseexception
		{
			get { return _releaseexception; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Releaseexception", value, value.ToString());
				
				_isChanged |= (_releaseexception != value); _releaseexception = value;
			}
		}
			
		/// <summary>
		/// 检测状态下是否有结果异常。0:无 ；1:结果异常；2:结果危急
		/// </summary>		
		public string Testresultexception
		{
			get { return _testresultexception; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Testresultexception", value, value.ToString());
				
				_isChanged |= (_testresultexception != value); _testresultexception = value;
			}
		}
			
		/// <summary>
		/// 检测状态下是否有结果为空。0:无 ；1:有
		/// </summary>		
		public string Testresultempty
		{
			get { return _testresultempty; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Testresultempty", value, value.ToString());
				
				_isChanged |= (_testresultempty != value); _testresultempty = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// 是否有重做项目。0：无；1：有
		/// </summary>		
		public string Redotestexception
		{
			get { return _redotestexception; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Redotestexception", value, value.ToString());
				
				_isChanged |= (_redotestexception != value); _redotestexception = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
