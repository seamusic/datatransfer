/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Maintenancelog : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _maintenancelogname; 
		private string _tablename; 
		private float _recordid; 
		private string _code; 
		private string _columnname; 
		private string _operationtype; 
		private string _operation; 
		private float _operateby; 
		private DateTime _operatedate; 
		private string _itemname; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Maintenancelog()
		{
			_maintenancelogname = 0; 
			_tablename = null; 
			_recordid = 0; 
			_code = null; 
			_columnname = null; 
			_operationtype = null; 
			_operation = null; 
			_operateby = 0; 
			_operatedate = new DateTime(); 
			_itemname = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自动ID
		/// </summary>		
		public float MaintenancelogName
		{
			get { return _maintenancelogname; }
			set { _isChanged |= (_maintenancelogname != value); _maintenancelogname = value; }
		}
			
		/// <summary>
		/// 表名/模块名
		/// </summary>		
		public string Tablename
		{
			get { return _tablename; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Tablename", value, value.ToString());
				
				_isChanged |= (_tablename != value); _tablename = value;
			}
		}
			
		/// <summary>
		/// 行记录所对应的ID值
		/// </summary>		
		public float Recordid
		{
			get { return _recordid; }
			set { _isChanged |= (_recordid != value); _recordid = value; }
		}
			
		/// <summary>
		/// 行记录对应的CODE，方便用户查询
		/// </summary>		
		public string Code
		{
			get { return _code; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Code", value, value.ToString());
				
				_isChanged |= (_code != value); _code = value;
			}
		}
			
		/// <summary>
		/// 列名
		/// </summary>		
		public string Columnname
		{
			get { return _columnname; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Columnname", value, value.ToString());
				
				_isChanged |= (_columnname != value); _columnname = value;
			}
		}
			
		/// <summary>
		/// 操作类型 ：新建/更新/删除
		/// </summary>		
		public string Operationtype
		{
			get { return _operationtype; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Operationtype", value, value.ToString());
				
				_isChanged |= (_operationtype != value); _operationtype = value;
			}
		}
			
		/// <summary>
		/// 操作内容
		/// </summary>		
		public string Operation
		{
			get { return _operation; }
			set	
			{
				if( value!= null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Operation", value, value.ToString());
				
				_isChanged |= (_operation != value); _operation = value;
			}
		}
			
		/// <summary>
		/// 操作者
		/// </summary>		
		public float Operateby
		{
			get { return _operateby; }
			set { _isChanged |= (_operateby != value); _operateby = value; }
		}
			
		/// <summary>
		/// 操作时间
		/// </summary>		
		public DateTime Operatedate
		{
			get { return _operatedate; }
			set { _isChanged |= (_operatedate != value); _operatedate = value; }
		}
			
		/// <summary>
		/// 相关项名称
		/// </summary>		
		public string Itemname
		{
			get { return _itemname; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Itemname", value, value.ToString());
				
				_isChanged |= (_itemname != value); _itemname = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
