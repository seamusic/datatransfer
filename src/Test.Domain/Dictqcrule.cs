/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictqcrule : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictqcruleid; 
		private string _rulename; 
		private string _ruleremark; 
		private string _active; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictqcrule()
		{
			_dictqcruleid = 0; 
			_rulename = null; 
			_ruleremark = null; 
			_active = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自动ID
		/// </summary>		
		public float Dictqcruleid
		{
			get { return _dictqcruleid; }
			set { _isChanged |= (_dictqcruleid != value); _dictqcruleid = value; }
		}
			
		/// <summary>
		/// 规则名称
		/// </summary>		
		public string Rulename
		{
			get { return _rulename; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Rulename", value, value.ToString());
				
				_isChanged |= (_rulename != value); _rulename = value;
			}
		}
			
		/// <summary>
		/// 规则备注
		/// </summary>		
		public string Ruleremark
		{
			get { return _ruleremark; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Ruleremark", value, value.ToString());
				
				_isChanged |= (_ruleremark != value); _ruleremark = value;
			}
		}
			
		/// <summary>
		/// 是否可用  0-否  1-是
		/// </summary>		
		public string Active
		{
			get { return _active; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());
				
				_isChanged |= (_active != value); _active = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
