/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictstatconditions : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictstatconditionsid; 
		private float _dictstatheadid; 
		private string _controlname; 
		private string _cotnrollabel; 
		private float _resulttype; 
		private string _controltype; 
		private string _defaultvalue; 
		private string _relationsql; 
		private string _outerrelationcontrol; 
		private float _displayorder; 
		private float _controlwidth; 
		private float _allowdefine; 
		private string _relationfield; 
		private float _needcondition; 
		private float _iscustomer; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictstatconditions()
		{
			_dictstatconditionsid = 0; 
			_dictstatheadid = 0; 
			_controlname = null; 
			_cotnrollabel = null; 
			_resulttype = 0; 
			_controltype = null; 
			_defaultvalue = null; 
			_relationsql = null; 
			_outerrelationcontrol = null; 
			_displayorder = 0; 
			_controlwidth = 0; 
			_allowdefine = 0; 
			_relationfield = null; 
			_needcondition = 0; 
			_iscustomer = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>		
		public float Dictstatconditionsid
		{
			get { return _dictstatconditionsid; }
			set { _isChanged |= (_dictstatconditionsid != value); _dictstatconditionsid = value; }
		}
			
		/// <summary>
		/// 查询头表ID
		/// </summary>		
		public float Dictstatheadid
		{
			get { return _dictstatheadid; }
			set { _isChanged |= (_dictstatheadid != value); _dictstatheadid = value; }
		}
			
		/// <summary>
		/// 控件名称，显示在窗口的控件名称
		/// </summary>		
		public string Controlname
		{
			get { return _controlname; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Controlname", value, value.ToString());
				
				_isChanged |= (_controlname != value); _controlname = value;
			}
		}
			
		/// <summary>
		/// 控件标题，显示控件的标题
		/// </summary>		
		public string Cotnrollabel
		{
			get { return _cotnrollabel; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Cotnrollabel", value, value.ToString());
				
				_isChanged |= (_cotnrollabel != value); _cotnrollabel = value;
			}
		}
			
		/// <summary>
		/// 返回值的类型，数字，字符，日期3种
		/// </summary>		
		public float Resulttype
		{
			get { return _resulttype; }
			set { _isChanged |= (_resulttype != value); _resulttype = value; }
		}
			
		/// <summary>
		/// 控件类型， 这里存放控件的名字空间全路径，用反射来生创建控件并加入到窗口中
		/// </summary>		
		public string Controltype
		{
			get { return _controltype; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Controltype", value, value.ToString());
				
				_isChanged |= (_controltype != value); _controltype = value;
			}
		}
			
		/// <summary>
		/// 默认值，空间初始显示的默认值，录入日期默认显示当前月份第一天， 下拉列表默认显示第一个，按控件类型来初始显示的默认值
		/// </summary>		
		public string Defaultvalue
		{
			get { return _defaultvalue; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Defaultvalue", value, value.ToString());
				
				_isChanged |= (_defaultvalue != value); _defaultvalue = value;
			}
		}
			
		/// <summary>
		/// 用于关联显示下拉的数据源SQL ，RelationSQL字段查询出来的结果固定3列 : id, 名称，助记符
		/// </summary>		
		public string Relationsql
		{
			get { return _relationsql; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Relationsql", value, value.ToString());
				
				_isChanged |= (_relationsql != value); _relationsql = value;
			}
		}
			
		/// <summary>
		/// 关联控件，以此控件产生的Where 来过滤RelationSQL查询出来的数据源
		/// </summary>		
		public string Outerrelationcontrol
		{
			get { return _outerrelationcontrol; }
			set	
			{
				if( value!= null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Outerrelationcontrol", value, value.ToString());
				
				_isChanged |= (_outerrelationcontrol != value); _outerrelationcontrol = value;
			}
		}
			
		/// <summary>
		/// 显示顺序
		/// </summary>		
		public float Displayorder
		{
			get { return _displayorder; }
			set { _isChanged |= (_displayorder != value); _displayorder = value; }
		}
			
		/// <summary>
		/// 控件宽度
		/// </summary>		
		public float Controlwidth
		{
			get { return _controlwidth; }
			set { _isChanged |= (_controlwidth != value); _controlwidth = value; }
		}
			
		/// <summary>
		/// 允许定义用于条件定义(以后扩展用)
		/// </summary>		
		public float Allowdefine
		{
			get { return _allowdefine; }
			set { _isChanged |= (_allowdefine != value); _allowdefine = value; }
		}
			
		/// <summary>
		/// 保存 条件控件对应查询视图
		/// </summary>		
		public string Relationfield
		{
			get { return _relationfield; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Relationfield", value, value.ToString());
				
				_isChanged |= (_relationfield != value); _relationfield = value;
			}
		}
			
		/// <summary>
		/// 是否允许不录入条件进行查询  0-不需要  1-需要
		/// </summary>		
		public float Needcondition
		{
			get { return _needcondition; }
			set { _isChanged |= (_needcondition != value); _needcondition = value; }
		}
			
		/// <summary>
		/// 当前报表条件是否客户医院 0-否  1-是
		/// </summary>		
		public float Iscustomer
		{
			get { return _iscustomer; }
			set { _isChanged |= (_iscustomer != value); _iscustomer = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
