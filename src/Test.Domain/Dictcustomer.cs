/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictcustomer : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictcustomerid; 
		private string _customercode; 
		private string _fastcode; 
		private string _customername; 
		private float _displayorder; 
		private string _address; 
		private string _telephone; 
		private string _fax; 
		private string _postcode; 
		private string _contactman; 
		private string _contactphone; 
		private string _email; 
		private string _salesman; 
		private string _customerservice; 
		private DateTime _contractbegin; 
		private DateTime _contractend; 
		private string _paymentmethod; 
		private float _paycycle; 
		private float _regionid; 
		private string _active; 
		private string _remark; 
		private string _customertype; 
		private string _mergerreport; 
		private string _status; 
		private float _dictrouteid; 
		private string _showheader; 
		private float _reportcopy; 
		private float _dictcustomergroupid; 
		private string _erpcode; 
		private string _erpname; 
		private string _documenttype; 
		private string _documentcode; 
		private float _dictcustdistrictid; 
		private string _customerengname; 
		private string _engaddress; 
		private float _dictsalemanid; 
		private float _dictcheckbillid; 
		private float _batchreport; 
		private string _reportshowmethod; 
		private DateTime _lastupdatedate; 
		private string _requestformtips; 
		private float _pathreportcopy; 
		private string _customerkey; 
		private string _drawcode; 
		private string _boxcode; 
		private string _customerflag; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictcustomer()
		{
			_dictcustomerid = 0; 
			_customercode = null; 
			_fastcode = null; 
			_customername = null; 
			_displayorder = 0; 
			_address = null; 
			_telephone = null; 
			_fax = null; 
			_postcode = null; 
			_contactman = null; 
			_contactphone = null; 
			_email = null; 
			_salesman = null; 
			_customerservice = null; 
			_contractbegin = new DateTime(); 
			_contractend = new DateTime(); 
			_paymentmethod = null; 
			_paycycle = 0; 
			_regionid = 0; 
			_active = null; 
			_remark = null; 
			_customertype = null; 
			_mergerreport = null; 
			_status = null; 
			_dictrouteid = 0; 
			_showheader = null; 
			_reportcopy = 0; 
			_dictcustomergroupid = 0; 
			_erpcode = null; 
			_erpname = null; 
			_documenttype = null; 
			_documentcode = null; 
			_dictcustdistrictid = 0; 
			_customerengname = null; 
			_engaddress = null; 
			_dictsalemanid = 0; 
			_dictcheckbillid = 0; 
			_batchreport = 0; 
			_reportshowmethod = null; 
			_lastupdatedate = new DateTime(); 
			_requestformtips = null; 
			_pathreportcopy = 0; 
			_customerkey = null; 
			_drawcode = null; 
			_boxcode = null; 
			_customerflag = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自动ID
		/// </summary>		
		public float Dictcustomerid
		{
			get { return _dictcustomerid; }
			set { _isChanged |= (_dictcustomerid != value); _dictcustomerid = value; }
		}
			
		/// <summary>
		/// 客户代码
		/// </summary>		
		public string Customercode
		{
			get { return _customercode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Customercode", value, value.ToString());
				
				_isChanged |= (_customercode != value); _customercode = value;
			}
		}
			
		/// <summary>
		/// 助记符
		/// </summary>		
		public string Fastcode
		{
			get { return _fastcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());
				
				_isChanged |= (_fastcode != value); _fastcode = value;
			}
		}
			
		/// <summary>
		/// 客户名称
		/// </summary>		
		public string Customername
		{
			get { return _customername; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Customername", value, value.ToString());
				
				_isChanged |= (_customername != value); _customername = value;
			}
		}
			
		/// <summary>
		/// 打印报告顺序
		/// </summary>		
		public float Displayorder
		{
			get { return _displayorder; }
			set { _isChanged |= (_displayorder != value); _displayorder = value; }
		}
			
		/// <summary>
		/// 地址
		/// </summary>		
		public string Address
		{
			get { return _address; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Address", value, value.ToString());
				
				_isChanged |= (_address != value); _address = value;
			}
		}
			
		/// <summary>
		/// 电话
		/// </summary>		
		public string Telephone
		{
			get { return _telephone; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Telephone", value, value.ToString());
				
				_isChanged |= (_telephone != value); _telephone = value;
			}
		}
			
		/// <summary>
		/// 传真
		/// </summary>		
		public string Fax
		{
			get { return _fax; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Fax", value, value.ToString());
				
				_isChanged |= (_fax != value); _fax = value;
			}
		}
			
		/// <summary>
		/// 邮编
		/// </summary>		
		public string Postcode
		{
			get { return _postcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Postcode", value, value.ToString());
				
				_isChanged |= (_postcode != value); _postcode = value;
			}
		}
			
		/// <summary>
		/// 联系人
		/// </summary>		
		public string Contactman
		{
			get { return _contactman; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Contactman", value, value.ToString());
				
				_isChanged |= (_contactman != value); _contactman = value;
			}
		}
			
		/// <summary>
		/// 联系人电话
		/// </summary>		
		public string Contactphone
		{
			get { return _contactphone; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Contactphone", value, value.ToString());
				
				_isChanged |= (_contactphone != value); _contactphone = value;
			}
		}
			
		/// <summary>
		/// 邮箱地址
		/// </summary>		
		public string Email
		{
			get { return _email; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Email", value, value.ToString());
				
				_isChanged |= (_email != value); _email = value;
			}
		}
			
		/// <summary>
		/// 销售人员
		/// </summary>		
		public string Salesman
		{
			get { return _salesman; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Salesman", value, value.ToString());
				
				_isChanged |= (_salesman != value); _salesman = value;
			}
		}
			
		/// <summary>
		/// 客服专员
		/// </summary>		
		public string Customerservice
		{
			get { return _customerservice; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Customerservice", value, value.ToString());
				
				_isChanged |= (_customerservice != value); _customerservice = value;
			}
		}
			
		/// <summary>
		/// 合同起始时间
		/// </summary>		
		public DateTime Contractbegin
		{
			get { return _contractbegin; }
			set { _isChanged |= (_contractbegin != value); _contractbegin = value; }
		}
			
		/// <summary>
		/// 合同结束时间
		/// </summary>		
		public DateTime Contractend
		{
			get { return _contractend; }
			set { _isChanged |= (_contractend != value); _contractend = value; }
		}
			
		/// <summary>
		/// 付款方式 ：现金/转账/支票
		/// </summary>		
		public string Paymentmethod
		{
			get { return _paymentmethod; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Paymentmethod", value, value.ToString());
				
				_isChanged |= (_paymentmethod != value); _paymentmethod = value;
			}
		}
			
		/// <summary>
		/// 回款周期，单位：天
		/// </summary>		
		public float Paycycle
		{
			get { return _paycycle; }
			set { _isChanged |= (_paycycle != value); _paycycle = value; }
		}
			
		/// <summary>
		/// 客户区域ID，对应表DICTLIBRARY
		/// </summary>		
		public float Regionid
		{
			get { return _regionid; }
			set { _isChanged |= (_regionid != value); _regionid = value; }
		}
			
		/// <summary>
		/// 是否可用  0-否 1-是
		/// </summary>		
		public string Active
		{
			get { return _active; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());
				
				_isChanged |= (_active != value); _active = value;
			}
		}
			
		/// <summary>
		/// 备注
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// 0- 一般客户 1-外包客户
		/// </summary>		
		public string Customertype
		{
			get { return _customertype; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Customertype", value, value.ToString());
				
				_isChanged |= (_customertype != value); _customertype = value;
			}
		}
			
		/// <summary>
		/// 是否合并报告打印  0-否 1-是
		/// </summary>		
		public string Mergerreport
		{
			get { return _mergerreport; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Mergerreport", value, value.ToString());
				
				_isChanged |= (_mergerreport != value); _mergerreport = value;
			}
		}
			
		/// <summary>
		/// 客户状态：合作客户/意向客户/终止客户
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_isChanged |= (_status != value); _status = value;
			}
		}
			
		/// <summary>
		/// 客户所在路线
		/// </summary>		
		public float Dictrouteid
		{
			get { return _dictrouteid; }
			set { _isChanged |= (_dictrouteid != value); _dictrouteid = value; }
		}
			
		/// <summary>
		/// 是否以顾客的名称出报告头0-否  1-是
		/// </summary>		
		public string Showheader
		{
			get { return _showheader; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Showheader", value, value.ToString());
				
				_isChanged |= (_showheader != value); _showheader = value;
			}
		}
			
		/// <summary>
		/// 报告的打印份数
		/// </summary>		
		public float Reportcopy
		{
			get { return _reportcopy; }
			set { _isChanged |= (_reportcopy != value); _reportcopy = value; }
		}
			
		/// <summary>
		/// 客户标准价所在区域
		/// </summary>		
		public float Dictcustomergroupid
		{
			get { return _dictcustomergroupid; }
			set { _isChanged |= (_dictcustomergroupid != value); _dictcustomergroupid = value; }
		}
			
		/// <summary>
		/// ERP客户代号
		/// </summary>		
		public string Erpcode
		{
			get { return _erpcode; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Erpcode", value, value.ToString());
				
				_isChanged |= (_erpcode != value); _erpcode = value;
			}
		}
			
		/// <summary>
		/// ERP客户名称
		/// </summary>		
		public string Erpname
		{
			get { return _erpname; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Erpname", value, value.ToString());
				
				_isChanged |= (_erpname != value); _erpname = value;
			}
		}
			
		/// <summary>
		/// 证件类型
		/// </summary>		
		public string Documenttype
		{
			get { return _documenttype; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Documenttype", value, value.ToString());
				
				_isChanged |= (_documenttype != value); _documenttype = value;
			}
		}
			
		/// <summary>
		/// 证件代号
		/// </summary>		
		public string Documentcode
		{
			get { return _documentcode; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Documentcode", value, value.ToString());
				
				_isChanged |= (_documentcode != value); _documentcode = value;
			}
		}
			
		/// <summary>
		/// 客户地区ID，对应表DictLibrary
		/// </summary>		
		public float Dictcustdistrictid
		{
			get { return _dictcustdistrictid; }
			set { _isChanged |= (_dictcustdistrictid != value); _dictcustdistrictid = value; }
		}
			
		/// <summary>
		/// 客户英文名称
		/// </summary>		
		public string Customerengname
		{
			get { return _customerengname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Customerengname", value, value.ToString());
				
				_isChanged |= (_customerengname != value); _customerengname = value;
			}
		}
			
		/// <summary>
		/// 客户英文地址
		/// </summary>		
		public string Engaddress
		{
			get { return _engaddress; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Engaddress", value, value.ToString());
				
				_isChanged |= (_engaddress != value); _engaddress = value;
			}
		}
			
		/// <summary>
		/// 销售人员ID，对应表DictUser
		/// </summary>		
		public float Dictsalemanid
		{
			get { return _dictsalemanid; }
			set { _isChanged |= (_dictsalemanid != value); _dictsalemanid = value; }
		}
			
		/// <summary>
		/// 财务清单核对人，来源于DICTUSER
		/// </summary>		
		public float Dictcheckbillid
		{
			get { return _dictcheckbillid; }
			set { _isChanged |= (_dictcheckbillid != value); _dictcheckbillid = value; }
		}
			
		/// <summary>
		/// 按审核次数分次生成报告
		/// </summary>		
		public float Batchreport
		{
			get { return _batchreport; }
			set { _isChanged |= (_batchreport != value); _batchreport = value; }
		}
			
		/// <summary>
		/// 报告上是否显示检测方法 0-不显示  1-显示
		/// </summary>		
		public string Reportshowmethod
		{
			get { return _reportshowmethod; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Reportshowmethod", value, value.ToString());
				
				_isChanged |= (_reportshowmethod != value); _reportshowmethod = value;
			}
		}
			
		/// <summary>
		/// 最后操作时间，新增、修改都要保存最后操作的时间
		/// </summary>		
		public DateTime Lastupdatedate
		{
			get { return _lastupdatedate; }
			set { _isChanged |= (_lastupdatedate != value); _lastupdatedate = value; }
		}
			
		/// <summary>
		/// 用来验单入库时提示该医院验单要返原单给客户
		/// </summary>		
		public string Requestformtips
		{
			get { return _requestformtips; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Requestformtips", value, value.ToString());
				
				_isChanged |= (_requestformtips != value); _requestformtips = value;
			}
		}
			
		/// <summary>
		/// 病理报告的打印份数
		/// </summary>		
		public float Pathreportcopy
		{
			get { return _pathreportcopy; }
			set { _isChanged |= (_pathreportcopy != value); _pathreportcopy = value; }
		}
			
		/// <summary>
		/// 客户调用达安WEBSERVICE对应的KEY
		/// </summary>		
		public string Customerkey
		{
			get { return _customerkey; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Customerkey", value, value.ToString());
				
				_isChanged |= (_customerkey != value); _customerkey = value;
			}
		}
			
		/// <summary>
		/// 柜号
		/// </summary>		
		public string Drawcode
		{
			get { return _drawcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Drawcode", value, value.ToString());
				
				_isChanged |= (_drawcode != value); _drawcode = value;
			}
		}
			
		/// <summary>
		/// 盒号
		/// </summary>		
		public string Boxcode
		{
			get { return _boxcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Boxcode", value, value.ToString());
				
				_isChanged |= (_boxcode != value); _boxcode = value;
			}
		}
			
		/// <summary>
		/// 客户标识(简写、缩写等)
		/// </summary>		
		public string Customerflag
		{
			get { return _customerflag; }
			set	
			{
				if( value!= null && value.Length > 80)
					throw new ArgumentOutOfRangeException("Invalid value for Customerflag", value, value.ToString());
				
				_isChanged |= (_customerflag != value); _customerflag = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
