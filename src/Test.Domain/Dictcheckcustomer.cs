/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictcheckcustomer : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictcheckcustomerid; 
		private string _customername; 
		private string _checkcustomercode; 
		private string _active; 
		private DateTime _createdate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictcheckcustomer()
		{
			_dictcheckcustomerid = 0; 
			_customername = null; 
			_checkcustomercode = null; 
			_active = null; 
			_createdate = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>		
		public float Dictcheckcustomerid
		{
			get { return _dictcheckcustomerid; }
			set { _isChanged |= (_dictcheckcustomerid != value); _dictcheckcustomerid = value; }
		}
			
		/// <summary>
		/// 客户名字
		/// </summary>		
		public string Customername
		{
			get { return _customername; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Customername", value, value.ToString());
				
				_isChanged |= (_customername != value); _customername = value;
			}
		}
			
		/// <summary>
		/// 体检客户代码
		/// </summary>		
		public string Checkcustomercode
		{
			get { return _checkcustomercode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Checkcustomercode", value, value.ToString());
				
				_isChanged |= (_checkcustomercode != value); _checkcustomercode = value;
			}
		}
			
		/// <summary>
		/// 0 不可用  1 可用
		/// </summary>		
		public string Active
		{
			get { return _active; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());
				
				_isChanged |= (_active != value); _active = value;
			}
		}
			
		/// <summary>
		/// 创建时间
		/// </summary>		
		public DateTime Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
