/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictpathologytype : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictpathologytypeid; 
		private string _typename; 
		private string _preseq; 
		private float _imagecount; 
		private float _imageprint; 
		private string _printclinicremark; 
		private float _dictinputtemplateid; 
		private string _currentseq; 
		private string _currentyear; 
		private float _dictreporttemplateid; 
		private float _dictspecimentypeid; 
		private float _dictenglishtemplateid; 
		private float _dictinputengtemplateid; 
		private string _engtypename; 
		private string _titleshow; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictpathologytype()
		{
			_dictpathologytypeid = 0; 
			_typename = null; 
			_preseq = null; 
			_imagecount = 0; 
			_imageprint = 0; 
			_printclinicremark = null; 
			_dictinputtemplateid = 0; 
			_currentseq = null; 
			_currentyear = null; 
			_dictreporttemplateid = 0; 
			_dictspecimentypeid = 0; 
			_dictenglishtemplateid = 0; 
			_dictinputengtemplateid = 0; 
			_engtypename = null; 
			_titleshow = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自动ID
		/// </summary>		
		public float Dictpathologytypeid
		{
			get { return _dictpathologytypeid; }
			set { _isChanged |= (_dictpathologytypeid != value); _dictpathologytypeid = value; }
		}
			
		/// <summary>
		/// 病理类型
		/// </summary>		
		public string Typename
		{
			get { return _typename; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Typename", value, value.ToString());
				
				_isChanged |= (_typename != value); _typename = value;
			}
		}
			
		/// <summary>
		/// 编号前缀
		/// </summary>		
		public string Preseq
		{
			get { return _preseq; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Preseq", value, value.ToString());
				
				_isChanged |= (_preseq != value); _preseq = value;
			}
		}
			
		/// <summary>
		/// 最大图片数量
		/// </summary>		
		public float Imagecount
		{
			get { return _imagecount; }
			set { _isChanged |= (_imagecount != value); _imagecount = value; }
		}
			
		/// <summary>
		/// 打印图片数量
		/// </summary>		
		public float Imageprint
		{
			get { return _imageprint; }
			set { _isChanged |= (_imageprint != value); _imageprint = value; }
		}
			
		/// <summary>
		/// 是否打印临床备注
		/// </summary>		
		public string Printclinicremark
		{
			get { return _printclinicremark; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Printclinicremark", value, value.ToString());
				
				_isChanged |= (_printclinicremark != value); _printclinicremark = value;
			}
		}
			
		/// <summary>
		/// 录入模板，对应表DictInputTemplate
		/// </summary>		
		public float Dictinputtemplateid
		{
			get { return _dictinputtemplateid; }
			set { _isChanged |= (_dictinputtemplateid != value); _dictinputtemplateid = value; }
		}
			
		/// <summary>
		/// 当前最大流水号
		/// </summary>		
		public string Currentseq
		{
			get { return _currentseq; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Currentseq", value, value.ToString());
				
				_isChanged |= (_currentseq != value); _currentseq = value;
			}
		}
			
		/// <summary>
		/// 当前年份
		/// </summary>		
		public string Currentyear
		{
			get { return _currentyear; }
			set	
			{
				if( value!= null && value.Length > 4)
					throw new ArgumentOutOfRangeException("Invalid value for Currentyear", value, value.ToString());
				
				_isChanged |= (_currentyear != value); _currentyear = value;
			}
		}
			
		/// <summary>
		/// 报告模板ID
		/// </summary>		
		public float Dictreporttemplateid
		{
			get { return _dictreporttemplateid; }
			set { _isChanged |= (_dictreporttemplateid != value); _dictreporttemplateid = value; }
		}
			
		/// <summary>
		/// 样本类型ID，对应表DictLibrary
		/// </summary>		
		public float Dictspecimentypeid
		{
			get { return _dictspecimentypeid; }
			set { _isChanged |= (_dictspecimentypeid != value); _dictspecimentypeid = value; }
		}
			
		/// <summary>
		///  英文模板ID
		/// </summary>		
		public float Dictenglishtemplateid
		{
			get { return _dictenglishtemplateid; }
			set { _isChanged |= (_dictenglishtemplateid != value); _dictenglishtemplateid = value; }
		}
			
		/// <summary>
		/// 病理类型英文结果录入模板ID
		/// </summary>		
		public float Dictinputengtemplateid
		{
			get { return _dictinputengtemplateid; }
			set { _isChanged |= (_dictinputengtemplateid != value); _dictinputengtemplateid = value; }
		}
			
		/// <summary>
		/// 病理类型英文名
		/// </summary>		
		public string Engtypename
		{
			get { return _engtypename; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Engtypename", value, value.ToString());
				
				_isChanged |= (_engtypename != value); _engtypename = value;
			}
		}
			
		/// <summary>
		/// 报告抬头显示内容
		/// </summary>		
		public string Titleshow
		{
			get { return _titleshow; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Titleshow", value, value.ToString());
				
				_isChanged |= (_titleshow != value); _titleshow = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
