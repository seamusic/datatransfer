/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dicthost : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dicthostid; 
		private string _hostname; 
		private string _hostdesc; 
		private string _hosttype; 
		private string _connecttype; 
		private string _initdir; 
		private string _localdir; 
		private string _hostport; 
		private string _isssl; 
		private string _username; 
		private string _password; 
		private float _fristorder; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dicthost()
		{
			_dicthostid = 0; 
			_hostname = null; 
			_hostdesc = null; 
			_hosttype = null; 
			_connecttype = null; 
			_initdir = null; 
			_localdir = null; 
			_hostport = null; 
			_isssl = null; 
			_username = null; 
			_password = null; 
			_fristorder = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自增长
		/// </summary>		
		public float Dicthostid
		{
			get { return _dicthostid; }
			set { _isChanged |= (_dicthostid != value); _dicthostid = value; }
		}
			
		/// <summary>
		/// 服务器名称, 计算机名称，或IP地址
		/// </summary>		
		public string Hostname
		{
			get { return _hostname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Hostname", value, value.ToString());
				
				_isChanged |= (_hostname != value); _hostname = value;
			}
		}
			
		/// <summary>
		/// 该服务器作用描述
		/// </summary>		
		public string Hostdesc
		{
			get { return _hostdesc; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Hostdesc", value, value.ToString());
				
				_isChanged |= (_hostdesc != value); _hostdesc = value;
			}
		}
			
		/// <summary>
		/// 服务器类型，如果是图片服务器则内容为"ImageHost" 
		/// </summary>		
		public string Hosttype
		{
			get { return _hosttype; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Hosttype", value, value.ToString());
				
				_isChanged |= (_hosttype != value); _hosttype = value;
			}
		}
			
		/// <summary>
		/// 链接类型 共享形式内容则为"Share"，Ftp链接则为"Ftp" 
		/// </summary>		
		public string Connecttype
		{
			get { return _connecttype; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Connecttype", value, value.ToString());
				
				_isChanged |= (_connecttype != value); _connecttype = value;
			}
		}
			
		/// <summary>
		/// 初始化目录,登录到服务器时从那个目录开始找文件
		/// </summary>		
		public string Initdir
		{
			get { return _initdir; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Initdir", value, value.ToString());
				
				_isChanged |= (_initdir != value); _initdir = value;
			}
		}
			
		/// <summary>
		/// 从服务传送回来的文件，暂时存放在本地的相对目录。
		/// </summary>		
		public string Localdir
		{
			get { return _localdir; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Localdir", value, value.ToString());
				
				_isChanged |= (_localdir != value); _localdir = value;
			}
		}
			
		/// <summary>
		/// 使用那个端口号进行链接
		/// </summary>		
		public string Hostport
		{
			get { return _hostport; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Hostport", value, value.ToString());
				
				_isChanged |= (_hostport != value); _hostport = value;
			}
		}
			
		/// <summary>
		/// 用服务器加密协议进行传输数据
		/// </summary>		
		public string Isssl
		{
			get { return _isssl; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Isssl", value, value.ToString());
				
				_isChanged |= (_isssl != value); _isssl = value;
			}
		}
			
		/// <summary>
		/// 登录服务器时使用的用户名
		/// </summary>		
		public string Username
		{
			get { return _username; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Username", value, value.ToString());
				
				_isChanged |= (_username != value); _username = value;
			}
		}
			
		/// <summary>
		/// 登录服务器时使用的密码
		/// </summary>		
		public string Password
		{
			get { return _password; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Password", value, value.ToString());
				
				_isChanged |= (_password != value); _password = value;
			}
		}
			
		/// <summary>
		/// 按照顺序号码进行链接
		/// </summary>		
		public float Fristorder
		{
			get { return _fristorder; }
			set { _isChanged |= (_fristorder != value); _fristorder = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
