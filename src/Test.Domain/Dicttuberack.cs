/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dicttuberack : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dicttuberackid; 
		private float _xrows; 
		private float _ycols; 
		private float _totalcount; 
		private string _typename; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dicttuberack()
		{
			_dicttuberackid = 0; 
			_xrows = 0; 
			_ycols = 0; 
			_totalcount = 0; 
			_typename = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自增长
		/// </summary>		
		public float Dicttuberackid
		{
			get { return _dicttuberackid; }
			set { _isChanged |= (_dicttuberackid != value); _dicttuberackid = value; }
		}
			
		/// <summary>
		/// 行数
		/// </summary>		
		public float Xrows
		{
			get { return _xrows; }
			set { _isChanged |= (_xrows != value); _xrows = value; }
		}
			
		/// <summary>
		/// 列数
		/// </summary>		
		public float Ycols
		{
			get { return _ycols; }
			set { _isChanged |= (_ycols != value); _ycols = value; }
		}
			
		/// <summary>
		/// 总数
		/// </summary>		
		public float Totalcount
		{
			get { return _totalcount; }
			set { _isChanged |= (_totalcount != value); _totalcount = value; }
		}
			
		/// <summary>
		/// 试管架类型描述
		/// </summary>		
		public string Typename
		{
			get { return _typename; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Typename", value, value.ToString());
				
				_isChanged |= (_typename != value); _typename = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
