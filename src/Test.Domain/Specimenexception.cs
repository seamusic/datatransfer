/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Specimenexception : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _specimenexceptionid; 
		private string _exceptiontype; 
		private string _subbarcode; 
		private float _applyby; 
		private DateTime _applydate; 
		private string _remark; 
		private float _approveby; 
		private DateTime _approvedate; 
		private float _sendby; 
		private float _takeby; 
		private DateTime _takedate; 
		private DateTime _delaydate; 
		private float _printby; 
		private DateTime _printdate; 
		private string _status; 
		private DateTime _createdate; 
		private string _barcode; 
		private string _pdfflag; 
		private string _testnames; 
		private float _dictlabdeptid; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Specimenexception()
		{
			_specimenexceptionid = 0; 
			_exceptiontype = null; 
			_subbarcode = null; 
			_applyby = 0; 
			_applydate = new DateTime(); 
			_remark = null; 
			_approveby = 0; 
			_approvedate = new DateTime(); 
			_sendby = 0; 
			_takeby = 0; 
			_takedate = new DateTime(); 
			_delaydate = new DateTime(); 
			_printby = 0; 
			_printdate = new DateTime(); 
			_status = null; 
			_createdate = new DateTime(); 
			_barcode = null; 
			_pdfflag = null; 
			_testnames = null; 
			_dictlabdeptid = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，序列
		/// </summary>		
		public float Specimenexceptionid
		{
			get { return _specimenexceptionid; }
			set { _isChanged |= (_specimenexceptionid != value); _specimenexceptionid = value; }
		}
			
		/// <summary>
		/// 三种值：DELAY/RERUN/CANCEL
		/// </summary>		
		public string Exceptiontype
		{
			get { return _exceptiontype; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Exceptiontype", value, value.ToString());
				
				_isChanged |= (_exceptiontype != value); _exceptiontype = value;
			}
		}
			
		/// <summary>
		/// 条码号
		/// </summary>		
		public string Subbarcode
		{
			get { return _subbarcode; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Subbarcode", value, value.ToString());
				
				_isChanged |= (_subbarcode != value); _subbarcode = value;
			}
		}
			
		/// <summary>
		/// 操作人，申请人
		/// </summary>		
		public float Applyby
		{
			get { return _applyby; }
			set { _isChanged |= (_applyby != value); _applyby = value; }
		}
			
		/// <summary>
		/// 操作时间，申请时间
		/// </summary>		
		public DateTime Applydate
		{
			get { return _applydate; }
			set { _isChanged |= (_applydate != value); _applydate = value; }
		}
			
		/// <summary>
		/// 备注
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// 审批人
		/// </summary>		
		public float Approveby
		{
			get { return _approveby; }
			set { _isChanged |= (_approveby != value); _approveby = value; }
		}
			
		/// <summary>
		/// 审批时间
		/// </summary>		
		public DateTime Approvedate
		{
			get { return _approvedate; }
			set { _isChanged |= (_approvedate != value); _approvedate = value; }
		}
			
		/// <summary>
		/// 退单时的标本传送人（通常指检验室的员工）
		/// </summary>		
		public float Sendby
		{
			get { return _sendby; }
			set { _isChanged |= (_sendby != value); _sendby = value; }
		}
			
		/// <summary>
		/// 标本收取人，通常指客服人员
		/// </summary>		
		public float Takeby
		{
			get { return _takeby; }
			set { _isChanged |= (_takeby != value); _takeby = value; }
		}
			
		/// <summary>
		/// 标本收取时间
		/// </summary>		
		public DateTime Takedate
		{
			get { return _takedate; }
			set { _isChanged |= (_takedate != value); _takedate = value; }
		}
			
		/// <summary>
		/// 延迟发报告时间
		/// </summary>		
		public DateTime Delaydate
		{
			get { return _delaydate; }
			set { _isChanged |= (_delaydate != value); _delaydate = value; }
		}
			
		/// <summary>
		/// 打印清单人
		/// </summary>		
		public float Printby
		{
			get { return _printby; }
			set { _isChanged |= (_printby != value); _printby = value; }
		}
			
		/// <summary>
		/// 打印清单日期
		/// </summary>		
		public DateTime Printdate
		{
			get { return _printdate; }
			set { _isChanged |= (_printdate != value); _printdate = value; }
		}
			
		/// <summary>
		/// 状态，对应表InitBasic
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());
				
				_isChanged |= (_status != value); _status = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime Createdate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		}
			
		/// <summary>
		/// 母条码
		/// </summary>		
		public string Barcode
		{
			get { return _barcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Barcode", value, value.ToString());
				
				_isChanged |= (_barcode != value); _barcode = value;
			}
		}
			
		/// <summary>
		/// 生成PDF 标志  0-未生成 1-已生成
		/// </summary>		
		public string Pdfflag
		{
			get { return _pdfflag; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Pdfflag", value, value.ToString());
				
				_isChanged |= (_pdfflag != value); _pdfflag = value;
			}
		}
			
		/// <summary>
		/// 测试项中文名字
		/// </summary>		
		public string Testnames
		{
			get { return _testnames; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Testnames", value, value.ToString());
				
				_isChanged |= (_testnames != value); _testnames = value;
			}
		}
			
		/// <summary>
		/// 申请物理实验室分组,对应表DictLibrary
		/// </summary>		
		public float Dictlabdeptid
		{
			get { return _dictlabdeptid; }
			set { _isChanged |= (_dictlabdeptid != value); _dictlabdeptid = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
