/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictqclottest : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictqclottestid; 
		private float _dictqclotid; 
		private float _dicttestitemid; 
		private string _mean; 
		private string _sd; 
		private string _ccv; 
		private string _testmethod; 
		private float _displayorder; 
		private string _cvbenchmark; 
		private DateTime _begindate; 
		private DateTime _enddate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictqclottest()
		{
			_dictqclottestid = 0; 
			_dictqclotid = 0; 
			_dicttestitemid = 0; 
			_mean = null; 
			_sd = null; 
			_ccv = null; 
			_testmethod = null; 
			_displayorder = 0; 
			_cvbenchmark = null; 
			_begindate = new DateTime(); 
			_enddate = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自增长
		/// </summary>		
		public float Dictqclottestid
		{
			get { return _dictqclottestid; }
			set { _isChanged |= (_dictqclottestid != value); _dictqclottestid = value; }
		}
			
		/// <summary>
		/// 外键，对应表DictQCLot
		/// </summary>		
		public float Dictqclotid
		{
			get { return _dictqclotid; }
			set { _isChanged |= (_dictqclotid != value); _dictqclotid = value; }
		}
			
		/// <summary>
		/// 测试项ID
		/// </summary>		
		public float Dicttestitemid
		{
			get { return _dicttestitemid; }
			set { _isChanged |= (_dicttestitemid != value); _dicttestitemid = value; }
		}
			
		/// <summary>
		/// 平均值
		/// </summary>		
		public string Mean
		{
			get { return _mean; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Mean", value, value.ToString());
				
				_isChanged |= (_mean != value); _mean = value;
			}
		}
			
		/// <summary>
		/// 标准差
		/// </summary>		
		public string Sd
		{
			get { return _sd; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Sd", value, value.ToString());
				
				_isChanged |= (_sd != value); _sd = value;
			}
		}
			
		/// <summary>
		/// CCV
		/// </summary>		
		public string Ccv
		{
			get { return _ccv; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Ccv", value, value.ToString());
				
				_isChanged |= (_ccv != value); _ccv = value;
			}
		}
			
		/// <summary>
		/// 测试方法
		/// </summary>		
		public string Testmethod
		{
			get { return _testmethod; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Testmethod", value, value.ToString());
				
				_isChanged |= (_testmethod != value); _testmethod = value;
			}
		}
			
		/// <summary>
		/// 显示顺序
		/// </summary>		
		public float Displayorder
		{
			get { return _displayorder; }
			set { _isChanged |= (_displayorder != value); _displayorder = value; }
		}
			
		/// <summary>
		/// 自定基准/目标cv值
		/// </summary>		
		public string Cvbenchmark
		{
			get { return _cvbenchmark; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Cvbenchmark", value, value.ToString());
				
				_isChanged |= (_cvbenchmark != value); _cvbenchmark = value;
			}
		}
			
		/// <summary>
		/// 本靶值起始时间
		/// </summary>		
		public DateTime Begindate
		{
			get { return _begindate; }
			set { _isChanged |= (_begindate != value); _begindate = value; }
		}
			
		/// <summary>
		/// 本靶值结束时间
		/// </summary>		
		public DateTime Enddate
		{
			get { return _enddate; }
			set { _isChanged |= (_enddate != value); _enddate = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
