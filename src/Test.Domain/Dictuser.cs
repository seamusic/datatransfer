/*
insert license info here
*/
using System;

namespace Daan.DataTransfer.Test.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Dictuser : DomainBase
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private float _dictuserid; 
		private string _usercode; 
		private string _password; 
		private string _echoname; 
		private string _usernote; 
		private string _active; 
		private string _islock; 
		private string _digitalusbtype; 
		private string _digitalusbid; 
		private string _usertype; 
		private string _allowasname; 
		private float _asname; 
		private float _dictdepartmentid; 
		private DateTime _agreedate; 
		private string _issaleman; 
		private DateTime _lastupdatedate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Dictuser()
		{
			_dictuserid = 0; 
			_usercode = null; 
			_password = null; 
			_echoname = null; 
			_usernote = null; 
			_active = null; 
			_islock = null; 
			_digitalusbtype = null; 
			_digitalusbid = null; 
			_usertype = null; 
			_allowasname = null; 
			_asname = 0; 
			_dictdepartmentid = 0; 
			_agreedate = new DateTime(); 
			_issaleman = null; 
			_lastupdatedate = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 用户ID，自增长
		/// </summary>		
		public float Dictuserid
		{
			get { return _dictuserid; }
			set { _isChanged |= (_dictuserid != value); _dictuserid = value; }
		}
			
		/// <summary>
		/// 相当于用户工号，如果是客户用户则填写客户编号
		/// </summary>		
		public string Usercode
		{
			get { return _usercode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Usercode", value, value.ToString());
				
				_isChanged |= (_usercode != value); _usercode = value;
			}
		}
			
		/// <summary>
		/// 用户密码，该字段存放是经过MD5加密的用户密码。
		/// </summary>		
		public string Password
		{
			get { return _password; }
			set	
			{
				if( value!= null && value.Length > 256)
					throw new ArgumentOutOfRangeException("Invalid value for Password", value, value.ToString());
				
				_isChanged |= (_password != value); _password = value;
			}
		}
			
		/// <summary>
		/// 用户显示用户名称
		/// </summary>		
		public string Echoname
		{
			get { return _echoname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Echoname", value, value.ToString());
				
				_isChanged |= (_echoname != value); _echoname = value;
			}
		}
			
		/// <summary>
		/// 用户备注
		/// </summary>		
		public string Usernote
		{
			get { return _usernote; }
			set	
			{
				if( value!= null && value.Length > 300)
					throw new ArgumentOutOfRangeException("Invalid value for Usernote", value, value.ToString());
				
				_isChanged |= (_usernote != value); _usernote = value;
			}
		}
			
		/// <summary>
		/// 是否可用  0-否  1-是
		/// </summary>		
		public string Active
		{
			get { return _active; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());
				
				_isChanged |= (_active != value); _active = value;
			}
		}
			
		/// <summary>
		/// 如果账户锁定，就不能使用系统界面进行登录，用于其他系统调用本系统，使用此类锁定账户进行访问。
		/// </summary>		
		public string Islock
		{
			get { return _islock; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Islock", value, value.ToString());
				
				_isChanged |= (_islock != value); _islock = value;
			}
		}
			
		/// <summary>
		/// 指定该用户使用那种类型的Usb认证设备进行登录, 现已知道有两种Usb认证设备，一是用户用来登录的UKey ，一是主管用于审核使用USB证书
		/// </summary>		
		public string Digitalusbtype
		{
			get { return _digitalusbtype; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Digitalusbtype", value, value.ToString());
				
				_isChanged |= (_digitalusbtype != value); _digitalusbtype = value;
			}
		}
			
		/// <summary>
		/// 数字签名ID
		/// </summary>		
		public string Digitalusbid
		{
			get { return _digitalusbid; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Digitalusbid", value, value.ToString());
				
				_isChanged |= (_digitalusbid != value); _digitalusbid = value;
			}
		}
			
		/// <summary>
		/// 用户类型分为：0内部员工账户，1客户医院账户。
		/// </summary>		
		public string Usertype
		{
			get { return _usertype; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Usertype", value, value.ToString());
				
				_isChanged |= (_usertype != value); _usertype = value;
			}
		}
			
		/// <summary>
		/// 是否允许其他用户伪装此用户进行登录，默认为不允许。只有类型为0的账户才有允许其他用户伪装此用户。
		/// </summary>		
		public string Allowasname
		{
			get { return _allowasname; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Allowasname", value, value.ToString());
				
				_isChanged |= (_allowasname != value); _allowasname = value;
			}
		}
			
		/// <summary>
		/// 此字段记录是用于验证用户权限的用户名， 内部员工则登陆帐户和伪用户名称一样，客户医院账户、800用户名称的用户的登陆名和伪用户名不一样。
		/// </summary>		
		public float Asname
		{
			get { return _asname; }
			set { _isChanged |= (_asname != value); _asname = value; }
		}
			
		/// <summary>
		/// 用户所在部门
		/// </summary>		
		public float Dictdepartmentid
		{
			get { return _dictdepartmentid; }
			set { _isChanged |= (_dictdepartmentid != value); _dictdepartmentid = value; }
		}
			
		/// <summary>
		/// WEB用户同意USB发放协议的时间
		/// </summary>		
		public DateTime Agreedate
		{
			get { return _agreedate; }
			set { _isChanged |= (_agreedate != value); _agreedate = value; }
		}
			
		/// <summary>
		/// 是否销售人员  0-否  1-是
		/// </summary>		
		public string Issaleman
		{
			get { return _issaleman; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Issaleman", value, value.ToString());
				
				_isChanged |= (_issaleman != value); _issaleman = value;
			}
		}
			
		/// <summary>
		/// 最后操作时间，新增、修改都要保存最后操作的时间
		/// </summary>		
		public DateTime Lastupdatedate
		{
			get { return _lastupdatedate; }
			set { _isChanged |= (_lastupdatedate != value); _lastupdatedate = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
